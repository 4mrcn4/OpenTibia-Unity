// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: appearances.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace OpenTibiaUnity.Protobuf.Appearances
{

    /// <summary>Holder for reflection information generated from appearances.proto</summary>
    public static partial class AppearancesReflection
    {

        #region Descriptor
        /// <summary>File descriptor for appearances.proto</summary>
        public static pbr::FileDescriptor Descriptor {
            get { return descriptor; }
        }
        private static pbr::FileDescriptor descriptor;

        static AppearancesReflection() {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                  "ChFhcHBlYXJhbmNlcy5wcm90bxIjT3BlblRpYmlhVW5pdHkuUHJvdG9idWYu",
                  "QXBwZWFyYW5jZXMaDHNoYXJlZC5wcm90byL8AgoLQXBwZWFyYW5jZXMSQAoH",
                  "b2JqZWN0cxgBIAMoCzIvLk9wZW5UaWJpYVVuaXR5LlByb3RvYnVmLkFwcGVh",
                  "cmFuY2VzLkFwcGVhcmFuY2USQAoHb3V0Zml0cxgCIAMoCzIvLk9wZW5UaWJp",
                  "YVVuaXR5LlByb3RvYnVmLkFwcGVhcmFuY2VzLkFwcGVhcmFuY2USQAoHZWZm",
                  "ZWN0cxgDIAMoCzIvLk9wZW5UaWJpYVVuaXR5LlByb3RvYnVmLkFwcGVhcmFu",
                  "Y2VzLkFwcGVhcmFuY2USQAoHbWlzc2xlcxgEIAMoCzIvLk9wZW5UaWJpYVVu",
                  "aXR5LlByb3RvYnVmLkFwcGVhcmFuY2VzLkFwcGVhcmFuY2USZQobc3BlY2lh",
                  "bE1lYW5pbmdBcHBlYXJhbmNlSWRzGAUgASgLMkAuT3BlblRpYmlhVW5pdHku",
                  "UHJvdG9idWYuQXBwZWFyYW5jZXMuU3BlY2lhbE1lYW5pbmdBcHBlYXJhbmNl",
                  "SWRzIrEBCgpBcHBlYXJhbmNlEgoKAmlEGAEgASgNEkQKC2ZyYW1lR3JvdXBz",
                  "GAIgAygLMi8uT3BlblRpYmlhVW5pdHkuUHJvdG9idWYuQXBwZWFyYW5jZXMu",
                  "RnJhbWVHcm91cBJDCgVmbGFncxgDIAEoCzI0Lk9wZW5UaWJpYVVuaXR5LlBy",
                  "b3RvYnVmLkFwcGVhcmFuY2VzLkFwcGVhcmFuY2VGbGFncxIMCgRuYW1lGAQg",
                  "ASgJIoUOCg9BcHBlYXJhbmNlRmxhZ3MSSQoGZ3JvdW5kGAEgASgLMjkuT3Bl",
                  "blRpYmlhVW5pdHkuUHJvdG9idWYuQXBwZWFyYW5jZXMuQXBwZWFyYW5jZUZs",
                  "YWdHcm91bmQSFAoMZ3JvdW5kQm9yZGVyGAIgASgIEg4KBmJvdHRvbRgDIAEo",
                  "CBILCgN0b3AYBCABKAgSEQoJY29udGFpbmVyGAUgASgIEhEKCXN0YWNrYWJs",
                  "ZRgGIAEoCBIQCghmb3JjZVVzZRgHIAEoCBIQCghtdWx0aVVzZRgIIAEoCBJN",
                  "Cgh3cml0YWJsZRgJIAEoCzI7Lk9wZW5UaWJpYVVuaXR5LlByb3RvYnVmLkFw",
                  "cGVhcmFuY2VzLkFwcGVhcmFuY2VGbGFnV3JpdGFibGUSVQoMd3JpdGFibGVP",
                  "bmNlGAogASgLMj8uT3BlblRpYmlhVW5pdHkuUHJvdG9idWYuQXBwZWFyYW5j",
                  "ZXMuQXBwZWFyYW5jZUZsYWdXcml0YWJsZU9uY2USFgoOZmx1aWRDb250YWlu",
                  "ZXIYCyABKAgSDgoGc3BsYXNoGAwgASgIEhIKCnVucGFzc2FibGUYDSABKAgS",
                  "EgoKdW5tb3ZlYWJsZRgOIAEoCBIPCgd1bnNpZ2h0GA8gASgIEhEKCWJsb2Nr",
                  "UGF0aBgQIAEoCBISCgpwaWNrdXBhYmxlGBEgASgIEhAKCGhhbmdhYmxlGBIg",
                  "ASgIEkUKBGhvb2sYEyABKAsyNy5PcGVuVGliaWFVbml0eS5Qcm90b2J1Zi5B",
                  "cHBlYXJhbmNlcy5BcHBlYXJhbmNlRmxhZ0hvb2sSEgoKcm90YXRlYWJsZRgU",
                  "IAEoCBJHCgVsaWdodBgVIAEoCzI4Lk9wZW5UaWJpYVVuaXR5LlByb3RvYnVm",
                  "LkFwcGVhcmFuY2VzLkFwcGVhcmFuY2VGbGFnTGlnaHQSEAoIZG9udEhpZGUY",
                  "FiABKAgSEwoLdHJhbnNsdWNlbnQYFyABKAgSSQoGb2Zmc2V0GBggASgLMjku",
                  "T3BlblRpYmlhVW5pdHkuUHJvdG9idWYuQXBwZWFyYW5jZXMuQXBwZWFyYW5j",
                  "ZUZsYWdPZmZzZXQSTAoJZWxldmF0aW9uGBkgASgLMjkuT3BlblRpYmlhVW5p",
                  "dHkuUHJvdG9idWYuQXBwZWFyYW5jZXMuQXBwZWFyYW5jZUZsYWdIZWlnaHQS",
                  "EwoLbHlpbmdDb3Jwc2UYGiABKAgSFQoNYW5pbWF0ZUFsd2F5cxgbIAEoCBJL",
                  "CgdtaW5pbWFwGBwgASgLMjouT3BlblRpYmlhVW5pdHkuUHJvdG9idWYuQXBw",
                  "ZWFyYW5jZXMuQXBwZWFyYW5jZUZsYWdBdXRvbWFwEk0KCGxlbnNIZWxwGB0g",
                  "ASgLMjsuT3BlblRpYmlhVW5pdHkuUHJvdG9idWYuQXBwZWFyYW5jZXMuQXBw",
                  "ZWFyYW5jZUZsYWdMZW5zSGVscBISCgpmdWxsR3JvdW5kGB4gASgIEgwKBExv",
                  "b2sYHyABKAgSSQoFY2xvdGgYICABKAsyOi5PcGVuVGliaWFVbml0eS5Qcm90",
                  "b2J1Zi5BcHBlYXJhbmNlcy5BcHBlYXJhbmNlRmxhZ0Nsb3RoZXMSSQoGbWFy",
                  "a2V0GCEgASgLMjkuT3BlblRpYmlhVW5pdHkuUHJvdG9idWYuQXBwZWFyYW5j",
                  "ZXMuQXBwZWFyYW5jZUZsYWdNYXJrZXQSVwoNZGVmYXVsdEFjdGlvbhgiIAEo",
                  "CzJALk9wZW5UaWJpYVVuaXR5LlByb3RvYnVmLkFwcGVhcmFuY2VzLkFwcGVh",
                  "cmFuY2VGbGFnRGVmYXVsdEFjdGlvbhILCgN1c2UYIyABKAgSEAoId3JhcGFi",
                  "bGUYJCABKAgSEgoKdW5XcmFwYWJsZRglIAEoCBIRCgl0b3BFZmZlY3QYJiAB",
                  "KAgSSwoLbnBjU2FsZURhdGEYJyADKAsyNi5PcGVuVGliaWFVbml0eS5Qcm90",
                  "b2J1Zi5BcHBlYXJhbmNlcy5BcHBlYXJhbmNlRmxhZ05QQxJbCg9jaGFuZ2Vk",
                  "VG9FeHBpcmUYKCABKAsyQi5PcGVuVGliaWFVbml0eS5Qcm90b2J1Zi5BcHBl",
                  "YXJhbmNlcy5BcHBlYXJhbmNlRmxhZ0NoYW5nZWRUb0V4cGlyZRIOCgZjb3Jw",
                  "c2UYKSABKAgSFAoMcGxheWVyQ29ycHNlGCogASgIElUKDmN5Y2xvcGVkaWFJ",
                  "dGVtGCsgASgLMj0uT3BlblRpYmlhVW5pdHkuUHJvdG9idWYuQXBwZWFyYW5j",
                  "ZXMuQXBwZWFyYW5jZUZsYWdDeWNsb3BlZGlhEhQKC2Zsb29yQ2hhbmdlGPwB",
                  "IAEoCBIYCg9ub01vdmVBbmltYXRpb24Y/QEgASgIEhAKB2NoYXJnZXMY/gEg",
                  "ASgIIiUKFEFwcGVhcmFuY2VGbGFnR3JvdW5kEg0KBXNwZWVkGAEgASgNIi8K",
                  "FkFwcGVhcmFuY2VGbGFnV3JpdGFibGUSFQoNbWF4VGV4dExlbmd0aBgBIAEo",
                  "DSI3ChpBcHBlYXJhbmNlRmxhZ1dyaXRhYmxlT25jZRIZChFtYXhUZXh0TGVu",
                  "Z3RoT25jZRgBIAEoDSJMChJBcHBlYXJhbmNlRmxhZ0hvb2sSNgoEdHlwZRgB",
                  "IAEoDjIoLk9wZW5UaWJpYVVuaXR5LlByb3RvYnVmLlNoYXJlZC5Ib29rVHlw",
                  "ZSI3ChNBcHBlYXJhbmNlRmxhZ0xpZ2h0EhEKCWludGVuc2l0eRgBIAEoDRIN",
                  "CgVjb2xvchgCIAEoDSIsChRBcHBlYXJhbmNlRmxhZ09mZnNldBIJCgF4GAEg",
                  "ASgNEgkKAXkYAiABKA0iKQoUQXBwZWFyYW5jZUZsYWdIZWlnaHQSEQoJZWxl",
                  "dmF0aW9uGAEgASgNIiYKFUFwcGVhcmFuY2VGbGFnQXV0b21hcBINCgVjb2xv",
                  "chgBIAEoDSIkChZBcHBlYXJhbmNlRmxhZ0xlbnNIZWxwEgoKAmlEGAEgASgN",
                  "IiUKFUFwcGVhcmFuY2VGbGFnQ2xvdGhlcxIMCgRzbG90GAEgASgNIrsBChRB",
                  "cHBlYXJhbmNlRmxhZ01hcmtldBI+CghjYXRlZ29yeRgBIAEoDjIsLk9wZW5U",
                  "aWJpYVVuaXR5LlByb3RvYnVmLlNoYXJlZC5JdGVtQ2F0ZWdvcnkSFwoPdHJh",
                  "ZGVBc09iamVjdElEGAIgASgNEhYKDnNob3dBc09iamVjdElEGAMgASgNEhwK",
                  "FHJlc3RyaWN0VG9Qcm9mZXNzaW9uGAQgASgNEhQKDG1pbmltdW1MZXZlbBgF",
                  "IAEoDSJbChtBcHBlYXJhbmNlRmxhZ0RlZmF1bHRBY3Rpb24SPAoGYWN0aW9u",
                  "GAEgASgOMiwuT3BlblRpYmlhVW5pdHkuUHJvdG9idWYuU2hhcmVkLlBsYXll",
                  "ckFjdGlvbiJYChFBcHBlYXJhbmNlRmxhZ05QQxIMCgRuYW1lGAEgASgJEhAK",
                  "CGxvY2F0aW9uGAIgASgJEhEKCXNhbGVQcmljZRgDIAEoDRIQCghidXlQcmlj",
                  "ZRgEIAEoDSI7Ch1BcHBlYXJhbmNlRmxhZ0NoYW5nZWRUb0V4cGlyZRIaChJm",
                  "b3JtZXJPYmplY3RUeXBlSWQYASABKA0iMwoYQXBwZWFyYW5jZUZsYWdDeWNs",
                  "b3BlZGlhEhcKD2N5Y2xvcGVkaWFfdHlwZRgBIAEoDSKlAQobU3BlY2lhbE1l",
                  "YW5pbmdBcHBlYXJhbmNlSWRzEhIKCmdvbGRDb2luSWQYASABKA0SFgoOcGxh",
                  "dGludW1Db2luSWQYAiABKA0SFQoNY3J5c3RhbENvaW5JZBgDIAEoDRITCgt0",
                  "aWJpYUNvaWRJZBgEIAEoDRIXCg9zdGFtcGVkTGV0dGVySWQYBSABKA0SFQoN",
                  "c3VwcGx5U3Rhc2hJZBgGIAEoDSKbAQoKRnJhbWVHcm91cBI8CgR0eXBlGAEg",
                  "ASgOMi4uT3BlblRpYmlhVW5pdHkuUHJvdG9idWYuU2hhcmVkLkZyYW1lR3Jv",
                  "dXBUeXBlEgoKAmlEGAIgASgNEkMKCnNwcml0ZUluZm8YAyABKAsyLy5PcGVu",
                  "VGliaWFVbml0eS5Qcm90b2J1Zi5BcHBlYXJhbmNlcy5TcHJpdGVJbmZvIsIC",
                  "CgpTcHJpdGVJbmZvEhQKDHBhdHRlcm5XaWR0aBgBIAEoDRIVCg1wYXR0ZXJu",
                  "SGVpZ2h0GAIgASgNEhQKDHBhdHRlcm5EZXB0aBgDIAEoDRIOCgZsYXllcnMY",
                  "BCABKA0SDgoGcGhhc2VzGAUgASgNEhEKCXNwcml0ZUlEcxgGIAMoDRIWCg5i",
                  "b3VuZGluZ1NxdWFyZRgHIAEoDRJHCglhbmltYXRpb24YCCABKAsyNC5PcGVu",
                  "VGliaWFVbml0eS5Qcm90b2J1Zi5BcHBlYXJhbmNlcy5TcHJpdGVBbmltYXRp",
                  "b24SEAoIaXNPcGFxdWUYCSABKAgSSwoZYm91bmRpbmdCb3hlc1BlckRpcmVj",
                  "dGlvbhgKIAMoCzIoLk9wZW5UaWJpYVVuaXR5LlByb3RvYnVmLkFwcGVhcmFu",
                  "Y2VzLkJveCI6CgNCb3gSCQoBeBgBIAEoDRIJCgF5GAIgASgNEg0KBXdpZHRo",
                  "GAMgASgNEg4KBmhlaWdodBgEIAEoDSL8AQoPU3ByaXRlQW5pbWF0aW9uEhkK",
                  "EWRlZmF1bHRTdGFydFBoYXNlGAEgASgNEhQKDHN5bmNob3JuaXplZBgCIAEo",
                  "CBIYChByYW5kb21TdGFydFBoYXNlGAMgASgIEkMKCGxvb3BUeXBlGAQgASgO",
                  "MjEuT3BlblRpYmlhVW5pdHkuUHJvdG9idWYuU2hhcmVkLkFuaW1hdGlvbkxv",
                  "b3BUeXBlEhEKCWxvb3BDb3VudBgFIAEoDRJGCgxzcHJpdGVQaGFzZXMYBiAD",
                  "KAsyMC5PcGVuVGliaWFVbml0eS5Qcm90b2J1Zi5BcHBlYXJhbmNlcy5TcHJp",
                  "dGVQaGFzZSI3CgtTcHJpdGVQaGFzZRITCgtkdXJhdGlvbk1pbhgBIAEoDRIT",
                  "CgtkdXJhdGlvbk1heBgCIAEoDWIGcHJvdG8z"));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { global::OpenTibiaUnity.Protobuf.Shared.SharedReflection.Descriptor, },
                new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTibiaUnity.Protobuf.Appearances.Appearances), global::OpenTibiaUnity.Protobuf.Appearances.Appearances.Parser, new[]{ "Objects", "Outfits", "Effects", "Missles", "SpecialMeaningAppearanceIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTibiaUnity.Protobuf.Appearances.Appearance), global::OpenTibiaUnity.Protobuf.Appearances.Appearance.Parser, new[]{ "_id", "FrameGroups", "Flags", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlags), global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlags.Parser, new[]{ "Ground", "GroundBorder", "Bottom", "Top", "Container", "Stackable", "ForceUse", "MultiUse", "Writable", "WritableOnce", "FluidContainer", "Splash", "Unpassable", "Unmoveable", "Unsight", "BlockPath", "Pickupable", "Hangable", "Hook", "Rotateable", "Light", "DontHide", "Translucent", "Offset", "Elevation", "LyingCorpse", "AnimateAlways", "Minimap", "LensHelp", "FullGround", "Look", "Cloth", "Market", "DefaultAction", "Use", "Wrapable", "UnWrapable", "TopEffect", "NpcSaleData", "ChangedToExpire", "Corpse", "PlayerCorpse", "CyclopediaItem", "FloorChange", "NoMoveAnimation", "Charges" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagGround), global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagGround.Parser, new[]{ "Speed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagWritable), global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagWritable.Parser, new[]{ "MaxTextLength" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagWritableOnce), global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagWritableOnce.Parser, new[]{ "MaxTextLengthOnce" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagHook), global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagHook.Parser, new[]{ "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagLight), global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagLight.Parser, new[]{ "Intensity", "Color" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagOffset), global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagOffset.Parser, new[]{ "X", "Y" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagHeight), global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagHeight.Parser, new[]{ "Elevation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagAutomap), global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagAutomap.Parser, new[]{ "Color" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagLensHelp), global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagLensHelp.Parser, new[]{ "_id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagClothes), global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagClothes.Parser, new[]{ "Slot" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagMarket), global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagMarket.Parser, new[]{ "Category", "TradeAsObject_id", "ShowAsObject_id", "RestrictToProfession", "MinimumLevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagDefaultAction), global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagDefaultAction.Parser, new[]{ "Action" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagNPC), global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagNPC.Parser, new[]{ "Name", "Location", "SalePrice", "BuyPrice" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagChangedToExpire), global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagChangedToExpire.Parser, new[]{ "FormerObjectTypeId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagCyclopedia), global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagCyclopedia.Parser, new[]{ "CyclopediaType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTibiaUnity.Protobuf.Appearances.SpecialMeaningAppearanceIds), global::OpenTibiaUnity.Protobuf.Appearances.SpecialMeaningAppearanceIds.Parser, new[]{ "GoldCoinId", "PlatinumCoinId", "CrystalCoinId", "TibiaCoidId", "StampedLetterId", "SupplyStashId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTibiaUnity.Protobuf.Appearances.FrameGroup), global::OpenTibiaUnity.Protobuf.Appearances.FrameGroup.Parser, new[]{ "Type", "_id", "SpriteInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTibiaUnity.Protobuf.Appearances.SpriteInfo), global::OpenTibiaUnity.Protobuf.Appearances.SpriteInfo.Parser, new[]{ "PatternWidth", "PatternHeight", "PatternDepth", "Layers", "Phases", "Sprite_ids", "BoundingSquare", "Animation", "IsOpaque", "BoundingBoxesPerDirection" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTibiaUnity.Protobuf.Appearances.Box), global::OpenTibiaUnity.Protobuf.Appearances.Box.Parser, new[]{ "X", "Y", "Width", "Height" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTibiaUnity.Protobuf.Appearances.SpriteAnimation), global::OpenTibiaUnity.Protobuf.Appearances.SpriteAnimation.Parser, new[]{ "DefaultStartPhase", "Synchornized", "RandomStartPhase", "LoopType", "LoopCount", "SpritePhases" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTibiaUnity.Protobuf.Appearances.SpritePhase), global::OpenTibiaUnity.Protobuf.Appearances.SpritePhase.Parser, new[]{ "DurationMin", "DurationMax" }, null, null, null)
                }));
        }
        #endregion

    }
    #region Messages
    public sealed partial class Appearances : pb::IMessage<Appearances>
    {
        private static readonly pb::MessageParser<Appearances> _parser = new pb::MessageParser<Appearances>(() => new Appearances());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Appearances> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
            get { return global::OpenTibiaUnity.Protobuf.Appearances.AppearancesReflection.Descriptor.MessageTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Appearances() {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Appearances(Appearances other) : this() {
            objects_ = other.objects_.Clone();
            outfits_ = other.outfits_.Clone();
            effects_ = other.effects_.Clone();
            missles_ = other.missles_.Clone();
            specialMeaningAppearanceIds_ = other.specialMeaningAppearanceIds_ != null ? other.specialMeaningAppearanceIds_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Appearances Clone() {
            return new Appearances(this);
        }

        /// <summary>Field number for the "objects" field.</summary>
        public const int ObjectsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::OpenTibiaUnity.Protobuf.Appearances.Appearance> _repeated_objects_codec
            = pb::FieldCodec.ForMessage(10, global::OpenTibiaUnity.Protobuf.Appearances.Appearance.Parser);
        private readonly pbc::RepeatedField<global::OpenTibiaUnity.Protobuf.Appearances.Appearance> objects_ = new pbc::RepeatedField<global::OpenTibiaUnity.Protobuf.Appearances.Appearance>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::OpenTibiaUnity.Protobuf.Appearances.Appearance> Objects {
            get { return objects_; }
        }

        /// <summary>Field number for the "outfits" field.</summary>
        public const int OutfitsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::OpenTibiaUnity.Protobuf.Appearances.Appearance> _repeated_outfits_codec
            = pb::FieldCodec.ForMessage(18, global::OpenTibiaUnity.Protobuf.Appearances.Appearance.Parser);
        private readonly pbc::RepeatedField<global::OpenTibiaUnity.Protobuf.Appearances.Appearance> outfits_ = new pbc::RepeatedField<global::OpenTibiaUnity.Protobuf.Appearances.Appearance>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::OpenTibiaUnity.Protobuf.Appearances.Appearance> Outfits {
            get { return outfits_; }
        }

        /// <summary>Field number for the "effects" field.</summary>
        public const int EffectsFieldNumber = 3;
        private static readonly pb::FieldCodec<global::OpenTibiaUnity.Protobuf.Appearances.Appearance> _repeated_effects_codec
            = pb::FieldCodec.ForMessage(26, global::OpenTibiaUnity.Protobuf.Appearances.Appearance.Parser);
        private readonly pbc::RepeatedField<global::OpenTibiaUnity.Protobuf.Appearances.Appearance> effects_ = new pbc::RepeatedField<global::OpenTibiaUnity.Protobuf.Appearances.Appearance>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::OpenTibiaUnity.Protobuf.Appearances.Appearance> Effects {
            get { return effects_; }
        }

        /// <summary>Field number for the "missles" field.</summary>
        public const int MisslesFieldNumber = 4;
        private static readonly pb::FieldCodec<global::OpenTibiaUnity.Protobuf.Appearances.Appearance> _repeated_missles_codec
            = pb::FieldCodec.ForMessage(34, global::OpenTibiaUnity.Protobuf.Appearances.Appearance.Parser);
        private readonly pbc::RepeatedField<global::OpenTibiaUnity.Protobuf.Appearances.Appearance> missles_ = new pbc::RepeatedField<global::OpenTibiaUnity.Protobuf.Appearances.Appearance>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::OpenTibiaUnity.Protobuf.Appearances.Appearance> Missles {
            get { return missles_; }
        }

        /// <summary>Field number for the "specialMeaningAppearanceIds" field.</summary>
        public const int SpecialMeaningAppearanceIdsFieldNumber = 5;
        private global::OpenTibiaUnity.Protobuf.Appearances.SpecialMeaningAppearanceIds specialMeaningAppearanceIds_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::OpenTibiaUnity.Protobuf.Appearances.SpecialMeaningAppearanceIds SpecialMeaningAppearanceIds {
            get { return specialMeaningAppearanceIds_; }
            set {
                specialMeaningAppearanceIds_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
            return Equals(other as Appearances);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Appearances other) {
            if (ReferenceEquals(other, null)) {
                return false;
            }
            if (ReferenceEquals(other, this)) {
                return true;
            }
            if (!objects_.Equals(other.objects_)) return false;
            if (!outfits_.Equals(other.outfits_)) return false;
            if (!effects_.Equals(other.effects_)) return false;
            if (!missles_.Equals(other.missles_)) return false;
            if (!object.Equals(SpecialMeaningAppearanceIds, other.SpecialMeaningAppearanceIds)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
            int hash = 1;
            hash ^= objects_.GetHashCode();
            hash ^= outfits_.GetHashCode();
            hash ^= effects_.GetHashCode();
            hash ^= missles_.GetHashCode();
            if (specialMeaningAppearanceIds_ != null) hash ^= SpecialMeaningAppearanceIds.GetHashCode();
            if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
            objects_.WriteTo(output, _repeated_objects_codec);
            outfits_.WriteTo(output, _repeated_outfits_codec);
            effects_.WriteTo(output, _repeated_effects_codec);
            missles_.WriteTo(output, _repeated_missles_codec);
            if (specialMeaningAppearanceIds_ != null) {
                output.WriteRawTag(42);
                output.WriteMessage(SpecialMeaningAppearanceIds);
            }
            if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
            int size = 0;
            size += objects_.CalculateSize(_repeated_objects_codec);
            size += outfits_.CalculateSize(_repeated_outfits_codec);
            size += effects_.CalculateSize(_repeated_effects_codec);
            size += missles_.CalculateSize(_repeated_missles_codec);
            if (specialMeaningAppearanceIds_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpecialMeaningAppearanceIds);
            }
            if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Appearances other) {
            if (other == null) {
                return;
            }
            objects_.Add(other.objects_);
            outfits_.Add(other.outfits_);
            effects_.Add(other.effects_);
            missles_.Add(other.missles_);
            if (other.specialMeaningAppearanceIds_ != null) {
                if (specialMeaningAppearanceIds_ == null) {
                    SpecialMeaningAppearanceIds = new global::OpenTibiaUnity.Protobuf.Appearances.SpecialMeaningAppearanceIds();
                }
                SpecialMeaningAppearanceIds.MergeFrom(other.SpecialMeaningAppearanceIds);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
                switch (tag) {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10: {
                        objects_.AddEntriesFrom(input, _repeated_objects_codec);
                        break;
                    }
                    case 18: {
                        outfits_.AddEntriesFrom(input, _repeated_outfits_codec);
                        break;
                    }
                    case 26: {
                        effects_.AddEntriesFrom(input, _repeated_effects_codec);
                        break;
                    }
                    case 34: {
                        missles_.AddEntriesFrom(input, _repeated_missles_codec);
                        break;
                    }
                    case 42: {
                        if (specialMeaningAppearanceIds_ == null) {
                            SpecialMeaningAppearanceIds = new global::OpenTibiaUnity.Protobuf.Appearances.SpecialMeaningAppearanceIds();
                        }
                        input.ReadMessage(SpecialMeaningAppearanceIds);
                        break;
                    }
                }
            }
        }

    }

    public sealed partial class Appearance : pb::IMessage<Appearance>
    {
        private static readonly pb::MessageParser<Appearance> _parser = new pb::MessageParser<Appearance>(() => new Appearance());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Appearance> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
            get { return global::OpenTibiaUnity.Protobuf.Appearances.AppearancesReflection.Descriptor.MessageTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Appearance() {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Appearance(Appearance other) : this() {
            iD_ = other.iD_;
            frameGroups_ = other.frameGroups_.Clone();
            flags_ = other.flags_ != null ? other.flags_.Clone() : null;
            name_ = other.name_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Appearance Clone() {
            return new Appearance(this);
        }

        /// <summary>Field number for the "iD" field.</summary>
        public const int _idFieldNumber = 1;
        private uint iD_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint _id {
            get { return iD_; }
            set {
                iD_ = value;
            }
        }

        /// <summary>Field number for the "frameGroups" field.</summary>
        public const int FrameGroupsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::OpenTibiaUnity.Protobuf.Appearances.FrameGroup> _repeated_frameGroups_codec
            = pb::FieldCodec.ForMessage(18, global::OpenTibiaUnity.Protobuf.Appearances.FrameGroup.Parser);
        private readonly pbc::RepeatedField<global::OpenTibiaUnity.Protobuf.Appearances.FrameGroup> frameGroups_ = new pbc::RepeatedField<global::OpenTibiaUnity.Protobuf.Appearances.FrameGroup>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::OpenTibiaUnity.Protobuf.Appearances.FrameGroup> FrameGroups {
            get { return frameGroups_; }
        }

        /// <summary>Field number for the "flags" field.</summary>
        public const int FlagsFieldNumber = 3;
        private global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlags flags_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlags Flags {
            get { return flags_; }
            set {
                flags_ = value;
            }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 4;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
            get { return name_; }
            set {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
            return Equals(other as Appearance);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Appearance other) {
            if (ReferenceEquals(other, null)) {
                return false;
            }
            if (ReferenceEquals(other, this)) {
                return true;
            }
            if (_id != other._id) return false;
            if (!frameGroups_.Equals(other.frameGroups_)) return false;
            if (!object.Equals(Flags, other.Flags)) return false;
            if (Name != other.Name) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
            int hash = 1;
            if (_id != 0) hash ^= _id.GetHashCode();
            hash ^= frameGroups_.GetHashCode();
            if (flags_ != null) hash ^= Flags.GetHashCode();
            if (Name.Length != 0) hash ^= Name.GetHashCode();
            if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
            if (_id != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(_id);
            }
            frameGroups_.WriteTo(output, _repeated_frameGroups_codec);
            if (flags_ != null) {
                output.WriteRawTag(26);
                output.WriteMessage(Flags);
            }
            if (Name.Length != 0) {
                output.WriteRawTag(34);
                output.WriteString(Name);
            }
            if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
            int size = 0;
            if (_id != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(_id);
            }
            size += frameGroups_.CalculateSize(_repeated_frameGroups_codec);
            if (flags_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Flags);
            }
            if (Name.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
            }
            if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Appearance other) {
            if (other == null) {
                return;
            }
            if (other._id != 0) {
                _id = other._id;
            }
            frameGroups_.Add(other.frameGroups_);
            if (other.flags_ != null) {
                if (flags_ == null) {
                    Flags = new global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlags();
                }
                Flags.MergeFrom(other.Flags);
            }
            if (other.Name.Length != 0) {
                Name = other.Name;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
                switch (tag) {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8: {
                        _id = input.ReadUInt32();
                        break;
                    }
                    case 18: {
                        frameGroups_.AddEntriesFrom(input, _repeated_frameGroups_codec);
                        break;
                    }
                    case 26: {
                        if (flags_ == null) {
                            Flags = new global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlags();
                        }
                        input.ReadMessage(Flags);
                        break;
                    }
                    case 34: {
                        Name = input.ReadString();
                        break;
                    }
                }
            }
        }

    }

    public sealed partial class AppearanceFlags : pb::IMessage<AppearanceFlags>
    {
        private static readonly pb::MessageParser<AppearanceFlags> _parser = new pb::MessageParser<AppearanceFlags>(() => new AppearanceFlags());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AppearanceFlags> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
            get { return global::OpenTibiaUnity.Protobuf.Appearances.AppearancesReflection.Descriptor.MessageTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlags() {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlags(AppearanceFlags other) : this() {
            ground_ = other.ground_ != null ? other.ground_.Clone() : null;
            groundBorder_ = other.groundBorder_;
            bottom_ = other.bottom_;
            top_ = other.top_;
            container_ = other.container_;
            stackable_ = other.stackable_;
            forceUse_ = other.forceUse_;
            multiUse_ = other.multiUse_;
            writable_ = other.writable_ != null ? other.writable_.Clone() : null;
            writableOnce_ = other.writableOnce_ != null ? other.writableOnce_.Clone() : null;
            fluidContainer_ = other.fluidContainer_;
            splash_ = other.splash_;
            unpassable_ = other.unpassable_;
            unmoveable_ = other.unmoveable_;
            unsight_ = other.unsight_;
            blockPath_ = other.blockPath_;
            pickupable_ = other.pickupable_;
            hangable_ = other.hangable_;
            hook_ = other.hook_ != null ? other.hook_.Clone() : null;
            rotateable_ = other.rotateable_;
            light_ = other.light_ != null ? other.light_.Clone() : null;
            dontHide_ = other.dontHide_;
            translucent_ = other.translucent_;
            offset_ = other.offset_ != null ? other.offset_.Clone() : null;
            elevation_ = other.elevation_ != null ? other.elevation_.Clone() : null;
            lyingCorpse_ = other.lyingCorpse_;
            animateAlways_ = other.animateAlways_;
            minimap_ = other.minimap_ != null ? other.minimap_.Clone() : null;
            lensHelp_ = other.lensHelp_ != null ? other.lensHelp_.Clone() : null;
            fullGround_ = other.fullGround_;
            look_ = other.look_;
            cloth_ = other.cloth_ != null ? other.cloth_.Clone() : null;
            market_ = other.market_ != null ? other.market_.Clone() : null;
            defaultAction_ = other.defaultAction_ != null ? other.defaultAction_.Clone() : null;
            use_ = other.use_;
            wrapable_ = other.wrapable_;
            unWrapable_ = other.unWrapable_;
            topEffect_ = other.topEffect_;
            npcSaleData_ = other.npcSaleData_.Clone();
            changedToExpire_ = other.changedToExpire_ != null ? other.changedToExpire_.Clone() : null;
            corpse_ = other.corpse_;
            playerCorpse_ = other.playerCorpse_;
            cyclopediaItem_ = other.cyclopediaItem_ != null ? other.cyclopediaItem_.Clone() : null;
            floorChange_ = other.floorChange_;
            noMoveAnimation_ = other.noMoveAnimation_;
            charges_ = other.charges_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlags Clone() {
            return new AppearanceFlags(this);
        }

        /// <summary>Field number for the "ground" field.</summary>
        public const int GroundFieldNumber = 1;
        private global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagGround ground_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagGround Ground {
            get { return ground_; }
            set {
                ground_ = value;
            }
        }

        /// <summary>Field number for the "groundBorder" field.</summary>
        public const int GroundBorderFieldNumber = 2;
        private bool groundBorder_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool GroundBorder {
            get { return groundBorder_; }
            set {
                groundBorder_ = value;
            }
        }

        /// <summary>Field number for the "bottom" field.</summary>
        public const int BottomFieldNumber = 3;
        private bool bottom_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Bottom {
            get { return bottom_; }
            set {
                bottom_ = value;
            }
        }

        /// <summary>Field number for the "top" field.</summary>
        public const int TopFieldNumber = 4;
        private bool top_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Top {
            get { return top_; }
            set {
                top_ = value;
            }
        }

        /// <summary>Field number for the "container" field.</summary>
        public const int ContainerFieldNumber = 5;
        private bool container_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Container {
            get { return container_; }
            set {
                container_ = value;
            }
        }

        /// <summary>Field number for the "stackable" field.</summary>
        public const int StackableFieldNumber = 6;
        private bool stackable_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Stackable {
            get { return stackable_; }
            set {
                stackable_ = value;
            }
        }

        /// <summary>Field number for the "forceUse" field.</summary>
        public const int ForceUseFieldNumber = 7;
        private bool forceUse_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool ForceUse {
            get { return forceUse_; }
            set {
                forceUse_ = value;
            }
        }

        /// <summary>Field number for the "multiUse" field.</summary>
        public const int MultiUseFieldNumber = 8;
        private bool multiUse_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool MultiUse {
            get { return multiUse_; }
            set {
                multiUse_ = value;
            }
        }

        /// <summary>Field number for the "writable" field.</summary>
        public const int WritableFieldNumber = 9;
        private global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagWritable writable_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagWritable Writable {
            get { return writable_; }
            set {
                writable_ = value;
            }
        }

        /// <summary>Field number for the "writableOnce" field.</summary>
        public const int WritableOnceFieldNumber = 10;
        private global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagWritableOnce writableOnce_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagWritableOnce WritableOnce {
            get { return writableOnce_; }
            set {
                writableOnce_ = value;
            }
        }

        /// <summary>Field number for the "fluidContainer" field.</summary>
        public const int FluidContainerFieldNumber = 11;
        private bool fluidContainer_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool FluidContainer {
            get { return fluidContainer_; }
            set {
                fluidContainer_ = value;
            }
        }

        /// <summary>Field number for the "splash" field.</summary>
        public const int SplashFieldNumber = 12;
        private bool splash_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Splash {
            get { return splash_; }
            set {
                splash_ = value;
            }
        }

        /// <summary>Field number for the "unpassable" field.</summary>
        public const int UnpassableFieldNumber = 13;
        private bool unpassable_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Unpassable {
            get { return unpassable_; }
            set {
                unpassable_ = value;
            }
        }

        /// <summary>Field number for the "unmoveable" field.</summary>
        public const int UnmoveableFieldNumber = 14;
        private bool unmoveable_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Unmoveable {
            get { return unmoveable_; }
            set {
                unmoveable_ = value;
            }
        }

        /// <summary>Field number for the "unsight" field.</summary>
        public const int UnsightFieldNumber = 15;
        private bool unsight_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Unsight {
            get { return unsight_; }
            set {
                unsight_ = value;
            }
        }

        /// <summary>Field number for the "blockPath" field.</summary>
        public const int BlockPathFieldNumber = 16;
        private bool blockPath_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool BlockPath {
            get { return blockPath_; }
            set {
                blockPath_ = value;
            }
        }

        /// <summary>Field number for the "pickupable" field.</summary>
        public const int PickupableFieldNumber = 17;
        private bool pickupable_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Pickupable {
            get { return pickupable_; }
            set {
                pickupable_ = value;
            }
        }

        /// <summary>Field number for the "hangable" field.</summary>
        public const int HangableFieldNumber = 18;
        private bool hangable_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Hangable {
            get { return hangable_; }
            set {
                hangable_ = value;
            }
        }

        /// <summary>Field number for the "hook" field.</summary>
        public const int HookFieldNumber = 19;
        private global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagHook hook_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagHook Hook {
            get { return hook_; }
            set {
                hook_ = value;
            }
        }

        /// <summary>Field number for the "rotateable" field.</summary>
        public const int RotateableFieldNumber = 20;
        private bool rotateable_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Rotateable {
            get { return rotateable_; }
            set {
                rotateable_ = value;
            }
        }

        /// <summary>Field number for the "light" field.</summary>
        public const int LightFieldNumber = 21;
        private global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagLight light_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagLight Light {
            get { return light_; }
            set {
                light_ = value;
            }
        }

        /// <summary>Field number for the "dontHide" field.</summary>
        public const int DontHideFieldNumber = 22;
        private bool dontHide_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool DontHide {
            get { return dontHide_; }
            set {
                dontHide_ = value;
            }
        }

        /// <summary>Field number for the "translucent" field.</summary>
        public const int TranslucentFieldNumber = 23;
        private bool translucent_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Translucent {
            get { return translucent_; }
            set {
                translucent_ = value;
            }
        }

        /// <summary>Field number for the "offset" field.</summary>
        public const int OffsetFieldNumber = 24;
        private global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagOffset offset_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagOffset Offset {
            get { return offset_; }
            set {
                offset_ = value;
            }
        }

        /// <summary>Field number for the "elevation" field.</summary>
        public const int ElevationFieldNumber = 25;
        private global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagHeight elevation_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagHeight Elevation {
            get { return elevation_; }
            set {
                elevation_ = value;
            }
        }

        /// <summary>Field number for the "lyingCorpse" field.</summary>
        public const int LyingCorpseFieldNumber = 26;
        private bool lyingCorpse_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool LyingCorpse {
            get { return lyingCorpse_; }
            set {
                lyingCorpse_ = value;
            }
        }

        /// <summary>Field number for the "animateAlways" field.</summary>
        public const int AnimateAlwaysFieldNumber = 27;
        private bool animateAlways_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool AnimateAlways {
            get { return animateAlways_; }
            set {
                animateAlways_ = value;
            }
        }

        /// <summary>Field number for the "minimap" field.</summary>
        public const int MinimapFieldNumber = 28;
        private global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagAutomap minimap_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagAutomap Minimap {
            get { return minimap_; }
            set {
                minimap_ = value;
            }
        }

        /// <summary>Field number for the "lensHelp" field.</summary>
        public const int LensHelpFieldNumber = 29;
        private global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagLensHelp lensHelp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagLensHelp LensHelp {
            get { return lensHelp_; }
            set {
                lensHelp_ = value;
            }
        }

        /// <summary>Field number for the "fullGround" field.</summary>
        public const int FullGroundFieldNumber = 30;
        private bool fullGround_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool FullGround {
            get { return fullGround_; }
            set {
                fullGround_ = value;
            }
        }

        /// <summary>Field number for the "Look" field.</summary>
        public const int LookFieldNumber = 31;
        private bool look_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Look {
            get { return look_; }
            set {
                look_ = value;
            }
        }

        /// <summary>Field number for the "cloth" field.</summary>
        public const int ClothFieldNumber = 32;
        private global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagClothes cloth_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagClothes Cloth {
            get { return cloth_; }
            set {
                cloth_ = value;
            }
        }

        /// <summary>Field number for the "market" field.</summary>
        public const int MarketFieldNumber = 33;
        private global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagMarket market_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagMarket Market {
            get { return market_; }
            set {
                market_ = value;
            }
        }

        /// <summary>Field number for the "defaultAction" field.</summary>
        public const int DefaultActionFieldNumber = 34;
        private global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagDefaultAction defaultAction_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagDefaultAction DefaultAction {
            get { return defaultAction_; }
            set {
                defaultAction_ = value;
            }
        }

        /// <summary>Field number for the "use" field.</summary>
        public const int UseFieldNumber = 35;
        private bool use_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Use {
            get { return use_; }
            set {
                use_ = value;
            }
        }

        /// <summary>Field number for the "wrapable" field.</summary>
        public const int WrapableFieldNumber = 36;
        private bool wrapable_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Wrapable {
            get { return wrapable_; }
            set {
                wrapable_ = value;
            }
        }

        /// <summary>Field number for the "unWrapable" field.</summary>
        public const int UnWrapableFieldNumber = 37;
        private bool unWrapable_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool UnWrapable {
            get { return unWrapable_; }
            set {
                unWrapable_ = value;
            }
        }

        /// <summary>Field number for the "topEffect" field.</summary>
        public const int TopEffectFieldNumber = 38;
        private bool topEffect_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool TopEffect {
            get { return topEffect_; }
            set {
                topEffect_ = value;
            }
        }

        /// <summary>Field number for the "npcSaleData" field.</summary>
        public const int NpcSaleDataFieldNumber = 39;
        private static readonly pb::FieldCodec<global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagNPC> _repeated_npcSaleData_codec
            = pb::FieldCodec.ForMessage(314, global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagNPC.Parser);
        private readonly pbc::RepeatedField<global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagNPC> npcSaleData_ = new pbc::RepeatedField<global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagNPC>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagNPC> NpcSaleData {
            get { return npcSaleData_; }
        }

        /// <summary>Field number for the "changedToExpire" field.</summary>
        public const int ChangedToExpireFieldNumber = 40;
        private global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagChangedToExpire changedToExpire_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagChangedToExpire ChangedToExpire {
            get { return changedToExpire_; }
            set {
                changedToExpire_ = value;
            }
        }

        /// <summary>Field number for the "corpse" field.</summary>
        public const int CorpseFieldNumber = 41;
        private bool corpse_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Corpse {
            get { return corpse_; }
            set {
                corpse_ = value;
            }
        }

        /// <summary>Field number for the "playerCorpse" field.</summary>
        public const int PlayerCorpseFieldNumber = 42;
        private bool playerCorpse_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool PlayerCorpse {
            get { return playerCorpse_; }
            set {
                playerCorpse_ = value;
            }
        }

        /// <summary>Field number for the "cyclopediaItem" field.</summary>
        public const int CyclopediaItemFieldNumber = 43;
        private global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagCyclopedia cyclopediaItem_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagCyclopedia CyclopediaItem {
            get { return cyclopediaItem_; }
            set {
                cyclopediaItem_ = value;
            }
        }

        /// <summary>Field number for the "floorChange" field.</summary>
        public const int FloorChangeFieldNumber = 252;
        private bool floorChange_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool FloorChange {
            get { return floorChange_; }
            set {
                floorChange_ = value;
            }
        }

        /// <summary>Field number for the "noMoveAnimation" field.</summary>
        public const int NoMoveAnimationFieldNumber = 253;
        private bool noMoveAnimation_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool NoMoveAnimation {
            get { return noMoveAnimation_; }
            set {
                noMoveAnimation_ = value;
            }
        }

        /// <summary>Field number for the "charges" field.</summary>
        public const int ChargesFieldNumber = 254;
        private bool charges_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Charges {
            get { return charges_; }
            set {
                charges_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
            return Equals(other as AppearanceFlags);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AppearanceFlags other) {
            if (ReferenceEquals(other, null)) {
                return false;
            }
            if (ReferenceEquals(other, this)) {
                return true;
            }
            if (!object.Equals(Ground, other.Ground)) return false;
            if (GroundBorder != other.GroundBorder) return false;
            if (Bottom != other.Bottom) return false;
            if (Top != other.Top) return false;
            if (Container != other.Container) return false;
            if (Stackable != other.Stackable) return false;
            if (ForceUse != other.ForceUse) return false;
            if (MultiUse != other.MultiUse) return false;
            if (!object.Equals(Writable, other.Writable)) return false;
            if (!object.Equals(WritableOnce, other.WritableOnce)) return false;
            if (FluidContainer != other.FluidContainer) return false;
            if (Splash != other.Splash) return false;
            if (Unpassable != other.Unpassable) return false;
            if (Unmoveable != other.Unmoveable) return false;
            if (Unsight != other.Unsight) return false;
            if (BlockPath != other.BlockPath) return false;
            if (Pickupable != other.Pickupable) return false;
            if (Hangable != other.Hangable) return false;
            if (!object.Equals(Hook, other.Hook)) return false;
            if (Rotateable != other.Rotateable) return false;
            if (!object.Equals(Light, other.Light)) return false;
            if (DontHide != other.DontHide) return false;
            if (Translucent != other.Translucent) return false;
            if (!object.Equals(Offset, other.Offset)) return false;
            if (!object.Equals(Elevation, other.Elevation)) return false;
            if (LyingCorpse != other.LyingCorpse) return false;
            if (AnimateAlways != other.AnimateAlways) return false;
            if (!object.Equals(Minimap, other.Minimap)) return false;
            if (!object.Equals(LensHelp, other.LensHelp)) return false;
            if (FullGround != other.FullGround) return false;
            if (Look != other.Look) return false;
            if (!object.Equals(Cloth, other.Cloth)) return false;
            if (!object.Equals(Market, other.Market)) return false;
            if (!object.Equals(DefaultAction, other.DefaultAction)) return false;
            if (Use != other.Use) return false;
            if (Wrapable != other.Wrapable) return false;
            if (UnWrapable != other.UnWrapable) return false;
            if (TopEffect != other.TopEffect) return false;
            if (!npcSaleData_.Equals(other.npcSaleData_)) return false;
            if (!object.Equals(ChangedToExpire, other.ChangedToExpire)) return false;
            if (Corpse != other.Corpse) return false;
            if (PlayerCorpse != other.PlayerCorpse) return false;
            if (!object.Equals(CyclopediaItem, other.CyclopediaItem)) return false;
            if (FloorChange != other.FloorChange) return false;
            if (NoMoveAnimation != other.NoMoveAnimation) return false;
            if (Charges != other.Charges) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
            int hash = 1;
            if (ground_ != null) hash ^= Ground.GetHashCode();
            if (GroundBorder != false) hash ^= GroundBorder.GetHashCode();
            if (Bottom != false) hash ^= Bottom.GetHashCode();
            if (Top != false) hash ^= Top.GetHashCode();
            if (Container != false) hash ^= Container.GetHashCode();
            if (Stackable != false) hash ^= Stackable.GetHashCode();
            if (ForceUse != false) hash ^= ForceUse.GetHashCode();
            if (MultiUse != false) hash ^= MultiUse.GetHashCode();
            if (writable_ != null) hash ^= Writable.GetHashCode();
            if (writableOnce_ != null) hash ^= WritableOnce.GetHashCode();
            if (FluidContainer != false) hash ^= FluidContainer.GetHashCode();
            if (Splash != false) hash ^= Splash.GetHashCode();
            if (Unpassable != false) hash ^= Unpassable.GetHashCode();
            if (Unmoveable != false) hash ^= Unmoveable.GetHashCode();
            if (Unsight != false) hash ^= Unsight.GetHashCode();
            if (BlockPath != false) hash ^= BlockPath.GetHashCode();
            if (Pickupable != false) hash ^= Pickupable.GetHashCode();
            if (Hangable != false) hash ^= Hangable.GetHashCode();
            if (hook_ != null) hash ^= Hook.GetHashCode();
            if (Rotateable != false) hash ^= Rotateable.GetHashCode();
            if (light_ != null) hash ^= Light.GetHashCode();
            if (DontHide != false) hash ^= DontHide.GetHashCode();
            if (Translucent != false) hash ^= Translucent.GetHashCode();
            if (offset_ != null) hash ^= Offset.GetHashCode();
            if (elevation_ != null) hash ^= Elevation.GetHashCode();
            if (LyingCorpse != false) hash ^= LyingCorpse.GetHashCode();
            if (AnimateAlways != false) hash ^= AnimateAlways.GetHashCode();
            if (minimap_ != null) hash ^= Minimap.GetHashCode();
            if (lensHelp_ != null) hash ^= LensHelp.GetHashCode();
            if (FullGround != false) hash ^= FullGround.GetHashCode();
            if (Look != false) hash ^= Look.GetHashCode();
            if (cloth_ != null) hash ^= Cloth.GetHashCode();
            if (market_ != null) hash ^= Market.GetHashCode();
            if (defaultAction_ != null) hash ^= DefaultAction.GetHashCode();
            if (Use != false) hash ^= Use.GetHashCode();
            if (Wrapable != false) hash ^= Wrapable.GetHashCode();
            if (UnWrapable != false) hash ^= UnWrapable.GetHashCode();
            if (TopEffect != false) hash ^= TopEffect.GetHashCode();
            hash ^= npcSaleData_.GetHashCode();
            if (changedToExpire_ != null) hash ^= ChangedToExpire.GetHashCode();
            if (Corpse != false) hash ^= Corpse.GetHashCode();
            if (PlayerCorpse != false) hash ^= PlayerCorpse.GetHashCode();
            if (cyclopediaItem_ != null) hash ^= CyclopediaItem.GetHashCode();
            if (FloorChange != false) hash ^= FloorChange.GetHashCode();
            if (NoMoveAnimation != false) hash ^= NoMoveAnimation.GetHashCode();
            if (Charges != false) hash ^= Charges.GetHashCode();
            if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
            if (ground_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(Ground);
            }
            if (GroundBorder != false) {
                output.WriteRawTag(16);
                output.WriteBool(GroundBorder);
            }
            if (Bottom != false) {
                output.WriteRawTag(24);
                output.WriteBool(Bottom);
            }
            if (Top != false) {
                output.WriteRawTag(32);
                output.WriteBool(Top);
            }
            if (Container != false) {
                output.WriteRawTag(40);
                output.WriteBool(Container);
            }
            if (Stackable != false) {
                output.WriteRawTag(48);
                output.WriteBool(Stackable);
            }
            if (ForceUse != false) {
                output.WriteRawTag(56);
                output.WriteBool(ForceUse);
            }
            if (MultiUse != false) {
                output.WriteRawTag(64);
                output.WriteBool(MultiUse);
            }
            if (writable_ != null) {
                output.WriteRawTag(74);
                output.WriteMessage(Writable);
            }
            if (writableOnce_ != null) {
                output.WriteRawTag(82);
                output.WriteMessage(WritableOnce);
            }
            if (FluidContainer != false) {
                output.WriteRawTag(88);
                output.WriteBool(FluidContainer);
            }
            if (Splash != false) {
                output.WriteRawTag(96);
                output.WriteBool(Splash);
            }
            if (Unpassable != false) {
                output.WriteRawTag(104);
                output.WriteBool(Unpassable);
            }
            if (Unmoveable != false) {
                output.WriteRawTag(112);
                output.WriteBool(Unmoveable);
            }
            if (Unsight != false) {
                output.WriteRawTag(120);
                output.WriteBool(Unsight);
            }
            if (BlockPath != false) {
                output.WriteRawTag(128, 1);
                output.WriteBool(BlockPath);
            }
            if (Pickupable != false) {
                output.WriteRawTag(136, 1);
                output.WriteBool(Pickupable);
            }
            if (Hangable != false) {
                output.WriteRawTag(144, 1);
                output.WriteBool(Hangable);
            }
            if (hook_ != null) {
                output.WriteRawTag(154, 1);
                output.WriteMessage(Hook);
            }
            if (Rotateable != false) {
                output.WriteRawTag(160, 1);
                output.WriteBool(Rotateable);
            }
            if (light_ != null) {
                output.WriteRawTag(170, 1);
                output.WriteMessage(Light);
            }
            if (DontHide != false) {
                output.WriteRawTag(176, 1);
                output.WriteBool(DontHide);
            }
            if (Translucent != false) {
                output.WriteRawTag(184, 1);
                output.WriteBool(Translucent);
            }
            if (offset_ != null) {
                output.WriteRawTag(194, 1);
                output.WriteMessage(Offset);
            }
            if (elevation_ != null) {
                output.WriteRawTag(202, 1);
                output.WriteMessage(Elevation);
            }
            if (LyingCorpse != false) {
                output.WriteRawTag(208, 1);
                output.WriteBool(LyingCorpse);
            }
            if (AnimateAlways != false) {
                output.WriteRawTag(216, 1);
                output.WriteBool(AnimateAlways);
            }
            if (minimap_ != null) {
                output.WriteRawTag(226, 1);
                output.WriteMessage(Minimap);
            }
            if (lensHelp_ != null) {
                output.WriteRawTag(234, 1);
                output.WriteMessage(LensHelp);
            }
            if (FullGround != false) {
                output.WriteRawTag(240, 1);
                output.WriteBool(FullGround);
            }
            if (Look != false) {
                output.WriteRawTag(248, 1);
                output.WriteBool(Look);
            }
            if (cloth_ != null) {
                output.WriteRawTag(130, 2);
                output.WriteMessage(Cloth);
            }
            if (market_ != null) {
                output.WriteRawTag(138, 2);
                output.WriteMessage(Market);
            }
            if (defaultAction_ != null) {
                output.WriteRawTag(146, 2);
                output.WriteMessage(DefaultAction);
            }
            if (Use != false) {
                output.WriteRawTag(152, 2);
                output.WriteBool(Use);
            }
            if (Wrapable != false) {
                output.WriteRawTag(160, 2);
                output.WriteBool(Wrapable);
            }
            if (UnWrapable != false) {
                output.WriteRawTag(168, 2);
                output.WriteBool(UnWrapable);
            }
            if (TopEffect != false) {
                output.WriteRawTag(176, 2);
                output.WriteBool(TopEffect);
            }
            npcSaleData_.WriteTo(output, _repeated_npcSaleData_codec);
            if (changedToExpire_ != null) {
                output.WriteRawTag(194, 2);
                output.WriteMessage(ChangedToExpire);
            }
            if (Corpse != false) {
                output.WriteRawTag(200, 2);
                output.WriteBool(Corpse);
            }
            if (PlayerCorpse != false) {
                output.WriteRawTag(208, 2);
                output.WriteBool(PlayerCorpse);
            }
            if (cyclopediaItem_ != null) {
                output.WriteRawTag(218, 2);
                output.WriteMessage(CyclopediaItem);
            }
            if (FloorChange != false) {
                output.WriteRawTag(224, 15);
                output.WriteBool(FloorChange);
            }
            if (NoMoveAnimation != false) {
                output.WriteRawTag(232, 15);
                output.WriteBool(NoMoveAnimation);
            }
            if (Charges != false) {
                output.WriteRawTag(240, 15);
                output.WriteBool(Charges);
            }
            if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
            int size = 0;
            if (ground_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ground);
            }
            if (GroundBorder != false) {
                size += 1 + 1;
            }
            if (Bottom != false) {
                size += 1 + 1;
            }
            if (Top != false) {
                size += 1 + 1;
            }
            if (Container != false) {
                size += 1 + 1;
            }
            if (Stackable != false) {
                size += 1 + 1;
            }
            if (ForceUse != false) {
                size += 1 + 1;
            }
            if (MultiUse != false) {
                size += 1 + 1;
            }
            if (writable_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Writable);
            }
            if (writableOnce_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(WritableOnce);
            }
            if (FluidContainer != false) {
                size += 1 + 1;
            }
            if (Splash != false) {
                size += 1 + 1;
            }
            if (Unpassable != false) {
                size += 1 + 1;
            }
            if (Unmoveable != false) {
                size += 1 + 1;
            }
            if (Unsight != false) {
                size += 1 + 1;
            }
            if (BlockPath != false) {
                size += 2 + 1;
            }
            if (Pickupable != false) {
                size += 2 + 1;
            }
            if (Hangable != false) {
                size += 2 + 1;
            }
            if (hook_ != null) {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(Hook);
            }
            if (Rotateable != false) {
                size += 2 + 1;
            }
            if (light_ != null) {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(Light);
            }
            if (DontHide != false) {
                size += 2 + 1;
            }
            if (Translucent != false) {
                size += 2 + 1;
            }
            if (offset_ != null) {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(Offset);
            }
            if (elevation_ != null) {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(Elevation);
            }
            if (LyingCorpse != false) {
                size += 2 + 1;
            }
            if (AnimateAlways != false) {
                size += 2 + 1;
            }
            if (minimap_ != null) {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(Minimap);
            }
            if (lensHelp_ != null) {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(LensHelp);
            }
            if (FullGround != false) {
                size += 2 + 1;
            }
            if (Look != false) {
                size += 2 + 1;
            }
            if (cloth_ != null) {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(Cloth);
            }
            if (market_ != null) {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(Market);
            }
            if (defaultAction_ != null) {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(DefaultAction);
            }
            if (Use != false) {
                size += 2 + 1;
            }
            if (Wrapable != false) {
                size += 2 + 1;
            }
            if (UnWrapable != false) {
                size += 2 + 1;
            }
            if (TopEffect != false) {
                size += 2 + 1;
            }
            size += npcSaleData_.CalculateSize(_repeated_npcSaleData_codec);
            if (changedToExpire_ != null) {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(ChangedToExpire);
            }
            if (Corpse != false) {
                size += 2 + 1;
            }
            if (PlayerCorpse != false) {
                size += 2 + 1;
            }
            if (cyclopediaItem_ != null) {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(CyclopediaItem);
            }
            if (FloorChange != false) {
                size += 2 + 1;
            }
            if (NoMoveAnimation != false) {
                size += 2 + 1;
            }
            if (Charges != false) {
                size += 2 + 1;
            }
            if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AppearanceFlags other) {
            if (other == null) {
                return;
            }
            if (other.ground_ != null) {
                if (ground_ == null) {
                    Ground = new global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagGround();
                }
                Ground.MergeFrom(other.Ground);
            }
            if (other.GroundBorder != false) {
                GroundBorder = other.GroundBorder;
            }
            if (other.Bottom != false) {
                Bottom = other.Bottom;
            }
            if (other.Top != false) {
                Top = other.Top;
            }
            if (other.Container != false) {
                Container = other.Container;
            }
            if (other.Stackable != false) {
                Stackable = other.Stackable;
            }
            if (other.ForceUse != false) {
                ForceUse = other.ForceUse;
            }
            if (other.MultiUse != false) {
                MultiUse = other.MultiUse;
            }
            if (other.writable_ != null) {
                if (writable_ == null) {
                    Writable = new global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagWritable();
                }
                Writable.MergeFrom(other.Writable);
            }
            if (other.writableOnce_ != null) {
                if (writableOnce_ == null) {
                    WritableOnce = new global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagWritableOnce();
                }
                WritableOnce.MergeFrom(other.WritableOnce);
            }
            if (other.FluidContainer != false) {
                FluidContainer = other.FluidContainer;
            }
            if (other.Splash != false) {
                Splash = other.Splash;
            }
            if (other.Unpassable != false) {
                Unpassable = other.Unpassable;
            }
            if (other.Unmoveable != false) {
                Unmoveable = other.Unmoveable;
            }
            if (other.Unsight != false) {
                Unsight = other.Unsight;
            }
            if (other.BlockPath != false) {
                BlockPath = other.BlockPath;
            }
            if (other.Pickupable != false) {
                Pickupable = other.Pickupable;
            }
            if (other.Hangable != false) {
                Hangable = other.Hangable;
            }
            if (other.hook_ != null) {
                if (hook_ == null) {
                    Hook = new global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagHook();
                }
                Hook.MergeFrom(other.Hook);
            }
            if (other.Rotateable != false) {
                Rotateable = other.Rotateable;
            }
            if (other.light_ != null) {
                if (light_ == null) {
                    Light = new global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagLight();
                }
                Light.MergeFrom(other.Light);
            }
            if (other.DontHide != false) {
                DontHide = other.DontHide;
            }
            if (other.Translucent != false) {
                Translucent = other.Translucent;
            }
            if (other.offset_ != null) {
                if (offset_ == null) {
                    Offset = new global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagOffset();
                }
                Offset.MergeFrom(other.Offset);
            }
            if (other.elevation_ != null) {
                if (elevation_ == null) {
                    Elevation = new global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagHeight();
                }
                Elevation.MergeFrom(other.Elevation);
            }
            if (other.LyingCorpse != false) {
                LyingCorpse = other.LyingCorpse;
            }
            if (other.AnimateAlways != false) {
                AnimateAlways = other.AnimateAlways;
            }
            if (other.minimap_ != null) {
                if (minimap_ == null) {
                    Minimap = new global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagAutomap();
                }
                Minimap.MergeFrom(other.Minimap);
            }
            if (other.lensHelp_ != null) {
                if (lensHelp_ == null) {
                    LensHelp = new global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagLensHelp();
                }
                LensHelp.MergeFrom(other.LensHelp);
            }
            if (other.FullGround != false) {
                FullGround = other.FullGround;
            }
            if (other.Look != false) {
                Look = other.Look;
            }
            if (other.cloth_ != null) {
                if (cloth_ == null) {
                    Cloth = new global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagClothes();
                }
                Cloth.MergeFrom(other.Cloth);
            }
            if (other.market_ != null) {
                if (market_ == null) {
                    Market = new global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagMarket();
                }
                Market.MergeFrom(other.Market);
            }
            if (other.defaultAction_ != null) {
                if (defaultAction_ == null) {
                    DefaultAction = new global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagDefaultAction();
                }
                DefaultAction.MergeFrom(other.DefaultAction);
            }
            if (other.Use != false) {
                Use = other.Use;
            }
            if (other.Wrapable != false) {
                Wrapable = other.Wrapable;
            }
            if (other.UnWrapable != false) {
                UnWrapable = other.UnWrapable;
            }
            if (other.TopEffect != false) {
                TopEffect = other.TopEffect;
            }
            npcSaleData_.Add(other.npcSaleData_);
            if (other.changedToExpire_ != null) {
                if (changedToExpire_ == null) {
                    ChangedToExpire = new global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagChangedToExpire();
                }
                ChangedToExpire.MergeFrom(other.ChangedToExpire);
            }
            if (other.Corpse != false) {
                Corpse = other.Corpse;
            }
            if (other.PlayerCorpse != false) {
                PlayerCorpse = other.PlayerCorpse;
            }
            if (other.cyclopediaItem_ != null) {
                if (cyclopediaItem_ == null) {
                    CyclopediaItem = new global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagCyclopedia();
                }
                CyclopediaItem.MergeFrom(other.CyclopediaItem);
            }
            if (other.FloorChange != false) {
                FloorChange = other.FloorChange;
            }
            if (other.NoMoveAnimation != false) {
                NoMoveAnimation = other.NoMoveAnimation;
            }
            if (other.Charges != false) {
                Charges = other.Charges;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
                switch (tag) {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10: {
                        if (ground_ == null) {
                            Ground = new global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagGround();
                        }
                        input.ReadMessage(Ground);
                        break;
                    }
                    case 16: {
                        GroundBorder = input.ReadBool();
                        break;
                    }
                    case 24: {
                        Bottom = input.ReadBool();
                        break;
                    }
                    case 32: {
                        Top = input.ReadBool();
                        break;
                    }
                    case 40: {
                        Container = input.ReadBool();
                        break;
                    }
                    case 48: {
                        Stackable = input.ReadBool();
                        break;
                    }
                    case 56: {
                        ForceUse = input.ReadBool();
                        break;
                    }
                    case 64: {
                        MultiUse = input.ReadBool();
                        break;
                    }
                    case 74: {
                        if (writable_ == null) {
                            Writable = new global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagWritable();
                        }
                        input.ReadMessage(Writable);
                        break;
                    }
                    case 82: {
                        if (writableOnce_ == null) {
                            WritableOnce = new global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagWritableOnce();
                        }
                        input.ReadMessage(WritableOnce);
                        break;
                    }
                    case 88: {
                        FluidContainer = input.ReadBool();
                        break;
                    }
                    case 96: {
                        Splash = input.ReadBool();
                        break;
                    }
                    case 104: {
                        Unpassable = input.ReadBool();
                        break;
                    }
                    case 112: {
                        Unmoveable = input.ReadBool();
                        break;
                    }
                    case 120: {
                        Unsight = input.ReadBool();
                        break;
                    }
                    case 128: {
                        BlockPath = input.ReadBool();
                        break;
                    }
                    case 136: {
                        Pickupable = input.ReadBool();
                        break;
                    }
                    case 144: {
                        Hangable = input.ReadBool();
                        break;
                    }
                    case 154: {
                        if (hook_ == null) {
                            Hook = new global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagHook();
                        }
                        input.ReadMessage(Hook);
                        break;
                    }
                    case 160: {
                        Rotateable = input.ReadBool();
                        break;
                    }
                    case 170: {
                        if (light_ == null) {
                            Light = new global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagLight();
                        }
                        input.ReadMessage(Light);
                        break;
                    }
                    case 176: {
                        DontHide = input.ReadBool();
                        break;
                    }
                    case 184: {
                        Translucent = input.ReadBool();
                        break;
                    }
                    case 194: {
                        if (offset_ == null) {
                            Offset = new global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagOffset();
                        }
                        input.ReadMessage(Offset);
                        break;
                    }
                    case 202: {
                        if (elevation_ == null) {
                            Elevation = new global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagHeight();
                        }
                        input.ReadMessage(Elevation);
                        break;
                    }
                    case 208: {
                        LyingCorpse = input.ReadBool();
                        break;
                    }
                    case 216: {
                        AnimateAlways = input.ReadBool();
                        break;
                    }
                    case 226: {
                        if (minimap_ == null) {
                            Minimap = new global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagAutomap();
                        }
                        input.ReadMessage(Minimap);
                        break;
                    }
                    case 234: {
                        if (lensHelp_ == null) {
                            LensHelp = new global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagLensHelp();
                        }
                        input.ReadMessage(LensHelp);
                        break;
                    }
                    case 240: {
                        FullGround = input.ReadBool();
                        break;
                    }
                    case 248: {
                        Look = input.ReadBool();
                        break;
                    }
                    case 258: {
                        if (cloth_ == null) {
                            Cloth = new global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagClothes();
                        }
                        input.ReadMessage(Cloth);
                        break;
                    }
                    case 266: {
                        if (market_ == null) {
                            Market = new global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagMarket();
                        }
                        input.ReadMessage(Market);
                        break;
                    }
                    case 274: {
                        if (defaultAction_ == null) {
                            DefaultAction = new global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagDefaultAction();
                        }
                        input.ReadMessage(DefaultAction);
                        break;
                    }
                    case 280: {
                        Use = input.ReadBool();
                        break;
                    }
                    case 288: {
                        Wrapable = input.ReadBool();
                        break;
                    }
                    case 296: {
                        UnWrapable = input.ReadBool();
                        break;
                    }
                    case 304: {
                        TopEffect = input.ReadBool();
                        break;
                    }
                    case 314: {
                        npcSaleData_.AddEntriesFrom(input, _repeated_npcSaleData_codec);
                        break;
                    }
                    case 322: {
                        if (changedToExpire_ == null) {
                            ChangedToExpire = new global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagChangedToExpire();
                        }
                        input.ReadMessage(ChangedToExpire);
                        break;
                    }
                    case 328: {
                        Corpse = input.ReadBool();
                        break;
                    }
                    case 336: {
                        PlayerCorpse = input.ReadBool();
                        break;
                    }
                    case 346: {
                        if (cyclopediaItem_ == null) {
                            CyclopediaItem = new global::OpenTibiaUnity.Protobuf.Appearances.AppearanceFlagCyclopedia();
                        }
                        input.ReadMessage(CyclopediaItem);
                        break;
                    }
                    case 2016: {
                        FloorChange = input.ReadBool();
                        break;
                    }
                    case 2024: {
                        NoMoveAnimation = input.ReadBool();
                        break;
                    }
                    case 2032: {
                        Charges = input.ReadBool();
                        break;
                    }
                }
            }
        }

    }

    public sealed partial class AppearanceFlagGround : pb::IMessage<AppearanceFlagGround>
    {
        private static readonly pb::MessageParser<AppearanceFlagGround> _parser = new pb::MessageParser<AppearanceFlagGround>(() => new AppearanceFlagGround());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AppearanceFlagGround> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
            get { return global::OpenTibiaUnity.Protobuf.Appearances.AppearancesReflection.Descriptor.MessageTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlagGround() {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlagGround(AppearanceFlagGround other) : this() {
            speed_ = other.speed_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlagGround Clone() {
            return new AppearanceFlagGround(this);
        }

        /// <summary>Field number for the "speed" field.</summary>
        public const int SpeedFieldNumber = 1;
        private uint speed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Speed {
            get { return speed_; }
            set {
                speed_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
            return Equals(other as AppearanceFlagGround);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AppearanceFlagGround other) {
            if (ReferenceEquals(other, null)) {
                return false;
            }
            if (ReferenceEquals(other, this)) {
                return true;
            }
            if (Speed != other.Speed) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
            int hash = 1;
            if (Speed != 0) hash ^= Speed.GetHashCode();
            if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
            if (Speed != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(Speed);
            }
            if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
            int size = 0;
            if (Speed != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Speed);
            }
            if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AppearanceFlagGround other) {
            if (other == null) {
                return;
            }
            if (other.Speed != 0) {
                Speed = other.Speed;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
                switch (tag) {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8: {
                        Speed = input.ReadUInt32();
                        break;
                    }
                }
            }
        }

    }

    public sealed partial class AppearanceFlagWritable : pb::IMessage<AppearanceFlagWritable>
    {
        private static readonly pb::MessageParser<AppearanceFlagWritable> _parser = new pb::MessageParser<AppearanceFlagWritable>(() => new AppearanceFlagWritable());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AppearanceFlagWritable> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
            get { return global::OpenTibiaUnity.Protobuf.Appearances.AppearancesReflection.Descriptor.MessageTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlagWritable() {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlagWritable(AppearanceFlagWritable other) : this() {
            maxTextLength_ = other.maxTextLength_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlagWritable Clone() {
            return new AppearanceFlagWritable(this);
        }

        /// <summary>Field number for the "maxTextLength" field.</summary>
        public const int MaxTextLengthFieldNumber = 1;
        private uint maxTextLength_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MaxTextLength {
            get { return maxTextLength_; }
            set {
                maxTextLength_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
            return Equals(other as AppearanceFlagWritable);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AppearanceFlagWritable other) {
            if (ReferenceEquals(other, null)) {
                return false;
            }
            if (ReferenceEquals(other, this)) {
                return true;
            }
            if (MaxTextLength != other.MaxTextLength) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
            int hash = 1;
            if (MaxTextLength != 0) hash ^= MaxTextLength.GetHashCode();
            if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
            if (MaxTextLength != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(MaxTextLength);
            }
            if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
            int size = 0;
            if (MaxTextLength != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxTextLength);
            }
            if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AppearanceFlagWritable other) {
            if (other == null) {
                return;
            }
            if (other.MaxTextLength != 0) {
                MaxTextLength = other.MaxTextLength;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
                switch (tag) {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8: {
                        MaxTextLength = input.ReadUInt32();
                        break;
                    }
                }
            }
        }

    }

    public sealed partial class AppearanceFlagWritableOnce : pb::IMessage<AppearanceFlagWritableOnce>
    {
        private static readonly pb::MessageParser<AppearanceFlagWritableOnce> _parser = new pb::MessageParser<AppearanceFlagWritableOnce>(() => new AppearanceFlagWritableOnce());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AppearanceFlagWritableOnce> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
            get { return global::OpenTibiaUnity.Protobuf.Appearances.AppearancesReflection.Descriptor.MessageTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlagWritableOnce() {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlagWritableOnce(AppearanceFlagWritableOnce other) : this() {
            maxTextLengthOnce_ = other.maxTextLengthOnce_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlagWritableOnce Clone() {
            return new AppearanceFlagWritableOnce(this);
        }

        /// <summary>Field number for the "maxTextLengthOnce" field.</summary>
        public const int MaxTextLengthOnceFieldNumber = 1;
        private uint maxTextLengthOnce_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MaxTextLengthOnce {
            get { return maxTextLengthOnce_; }
            set {
                maxTextLengthOnce_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
            return Equals(other as AppearanceFlagWritableOnce);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AppearanceFlagWritableOnce other) {
            if (ReferenceEquals(other, null)) {
                return false;
            }
            if (ReferenceEquals(other, this)) {
                return true;
            }
            if (MaxTextLengthOnce != other.MaxTextLengthOnce) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
            int hash = 1;
            if (MaxTextLengthOnce != 0) hash ^= MaxTextLengthOnce.GetHashCode();
            if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
            if (MaxTextLengthOnce != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(MaxTextLengthOnce);
            }
            if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
            int size = 0;
            if (MaxTextLengthOnce != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxTextLengthOnce);
            }
            if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AppearanceFlagWritableOnce other) {
            if (other == null) {
                return;
            }
            if (other.MaxTextLengthOnce != 0) {
                MaxTextLengthOnce = other.MaxTextLengthOnce;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
                switch (tag) {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8: {
                        MaxTextLengthOnce = input.ReadUInt32();
                        break;
                    }
                }
            }
        }

    }

    public sealed partial class AppearanceFlagHook : pb::IMessage<AppearanceFlagHook>
    {
        private static readonly pb::MessageParser<AppearanceFlagHook> _parser = new pb::MessageParser<AppearanceFlagHook>(() => new AppearanceFlagHook());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AppearanceFlagHook> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
            get { return global::OpenTibiaUnity.Protobuf.Appearances.AppearancesReflection.Descriptor.MessageTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlagHook() {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlagHook(AppearanceFlagHook other) : this() {
            type_ = other.type_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlagHook Clone() {
            return new AppearanceFlagHook(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private global::OpenTibiaUnity.Protobuf.Shared.HookType type_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::OpenTibiaUnity.Protobuf.Shared.HookType Type {
            get { return type_; }
            set {
                type_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
            return Equals(other as AppearanceFlagHook);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AppearanceFlagHook other) {
            if (ReferenceEquals(other, null)) {
                return false;
            }
            if (ReferenceEquals(other, this)) {
                return true;
            }
            if (Type != other.Type) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
            int hash = 1;
            if (Type != 0) hash ^= Type.GetHashCode();
            if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
            if (Type != 0) {
                output.WriteRawTag(8);
                output.WriteEnum((int)Type);
            }
            if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
            int size = 0;
            if (Type != 0) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
            }
            if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AppearanceFlagHook other) {
            if (other == null) {
                return;
            }
            if (other.Type != 0) {
                Type = other.Type;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
                switch (tag) {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8: {
                        Type = (global::OpenTibiaUnity.Protobuf.Shared.HookType)input.ReadEnum();
                        break;
                    }
                }
            }
        }

    }

    public sealed partial class AppearanceFlagLight : pb::IMessage<AppearanceFlagLight>
    {
        private static readonly pb::MessageParser<AppearanceFlagLight> _parser = new pb::MessageParser<AppearanceFlagLight>(() => new AppearanceFlagLight());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AppearanceFlagLight> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
            get { return global::OpenTibiaUnity.Protobuf.Appearances.AppearancesReflection.Descriptor.MessageTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlagLight() {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlagLight(AppearanceFlagLight other) : this() {
            intensity_ = other.intensity_;
            color_ = other.color_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlagLight Clone() {
            return new AppearanceFlagLight(this);
        }

        /// <summary>Field number for the "intensity" field.</summary>
        public const int IntensityFieldNumber = 1;
        private uint intensity_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Intensity {
            get { return intensity_; }
            set {
                intensity_ = value;
            }
        }

        /// <summary>Field number for the "color" field.</summary>
        public const int ColorFieldNumber = 2;
        private uint color_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Color {
            get { return color_; }
            set {
                color_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
            return Equals(other as AppearanceFlagLight);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AppearanceFlagLight other) {
            if (ReferenceEquals(other, null)) {
                return false;
            }
            if (ReferenceEquals(other, this)) {
                return true;
            }
            if (Intensity != other.Intensity) return false;
            if (Color != other.Color) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
            int hash = 1;
            if (Intensity != 0) hash ^= Intensity.GetHashCode();
            if (Color != 0) hash ^= Color.GetHashCode();
            if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
            if (Intensity != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(Intensity);
            }
            if (Color != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(Color);
            }
            if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
            int size = 0;
            if (Intensity != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Intensity);
            }
            if (Color != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Color);
            }
            if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AppearanceFlagLight other) {
            if (other == null) {
                return;
            }
            if (other.Intensity != 0) {
                Intensity = other.Intensity;
            }
            if (other.Color != 0) {
                Color = other.Color;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
                switch (tag) {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8: {
                        Intensity = input.ReadUInt32();
                        break;
                    }
                    case 16: {
                        Color = input.ReadUInt32();
                        break;
                    }
                }
            }
        }

    }

    public sealed partial class AppearanceFlagOffset : pb::IMessage<AppearanceFlagOffset>
    {
        private static readonly pb::MessageParser<AppearanceFlagOffset> _parser = new pb::MessageParser<AppearanceFlagOffset>(() => new AppearanceFlagOffset());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AppearanceFlagOffset> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
            get { return global::OpenTibiaUnity.Protobuf.Appearances.AppearancesReflection.Descriptor.MessageTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlagOffset() {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlagOffset(AppearanceFlagOffset other) : this() {
            x_ = other.x_;
            y_ = other.y_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlagOffset Clone() {
            return new AppearanceFlagOffset(this);
        }

        /// <summary>Field number for the "x" field.</summary>
        public const int XFieldNumber = 1;
        private uint x_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint X {
            get { return x_; }
            set {
                x_ = value;
            }
        }

        /// <summary>Field number for the "y" field.</summary>
        public const int YFieldNumber = 2;
        private uint y_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Y {
            get { return y_; }
            set {
                y_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
            return Equals(other as AppearanceFlagOffset);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AppearanceFlagOffset other) {
            if (ReferenceEquals(other, null)) {
                return false;
            }
            if (ReferenceEquals(other, this)) {
                return true;
            }
            if (X != other.X) return false;
            if (Y != other.Y) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
            int hash = 1;
            if (X != 0) hash ^= X.GetHashCode();
            if (Y != 0) hash ^= Y.GetHashCode();
            if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
            if (X != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(X);
            }
            if (Y != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(Y);
            }
            if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
            int size = 0;
            if (X != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(X);
            }
            if (Y != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Y);
            }
            if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AppearanceFlagOffset other) {
            if (other == null) {
                return;
            }
            if (other.X != 0) {
                X = other.X;
            }
            if (other.Y != 0) {
                Y = other.Y;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
                switch (tag) {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8: {
                        X = input.ReadUInt32();
                        break;
                    }
                    case 16: {
                        Y = input.ReadUInt32();
                        break;
                    }
                }
            }
        }

    }

    public sealed partial class AppearanceFlagHeight : pb::IMessage<AppearanceFlagHeight>
    {
        private static readonly pb::MessageParser<AppearanceFlagHeight> _parser = new pb::MessageParser<AppearanceFlagHeight>(() => new AppearanceFlagHeight());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AppearanceFlagHeight> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
            get { return global::OpenTibiaUnity.Protobuf.Appearances.AppearancesReflection.Descriptor.MessageTypes[9]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlagHeight() {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlagHeight(AppearanceFlagHeight other) : this() {
            elevation_ = other.elevation_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlagHeight Clone() {
            return new AppearanceFlagHeight(this);
        }

        /// <summary>Field number for the "elevation" field.</summary>
        public const int ElevationFieldNumber = 1;
        private uint elevation_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Elevation {
            get { return elevation_; }
            set {
                elevation_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
            return Equals(other as AppearanceFlagHeight);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AppearanceFlagHeight other) {
            if (ReferenceEquals(other, null)) {
                return false;
            }
            if (ReferenceEquals(other, this)) {
                return true;
            }
            if (Elevation != other.Elevation) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
            int hash = 1;
            if (Elevation != 0) hash ^= Elevation.GetHashCode();
            if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
            if (Elevation != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(Elevation);
            }
            if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
            int size = 0;
            if (Elevation != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Elevation);
            }
            if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AppearanceFlagHeight other) {
            if (other == null) {
                return;
            }
            if (other.Elevation != 0) {
                Elevation = other.Elevation;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
                switch (tag) {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8: {
                        Elevation = input.ReadUInt32();
                        break;
                    }
                }
            }
        }

    }

    public sealed partial class AppearanceFlagAutomap : pb::IMessage<AppearanceFlagAutomap>
    {
        private static readonly pb::MessageParser<AppearanceFlagAutomap> _parser = new pb::MessageParser<AppearanceFlagAutomap>(() => new AppearanceFlagAutomap());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AppearanceFlagAutomap> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
            get { return global::OpenTibiaUnity.Protobuf.Appearances.AppearancesReflection.Descriptor.MessageTypes[10]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlagAutomap() {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlagAutomap(AppearanceFlagAutomap other) : this() {
            color_ = other.color_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlagAutomap Clone() {
            return new AppearanceFlagAutomap(this);
        }

        /// <summary>Field number for the "color" field.</summary>
        public const int ColorFieldNumber = 1;
        private uint color_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Color {
            get { return color_; }
            set {
                color_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
            return Equals(other as AppearanceFlagAutomap);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AppearanceFlagAutomap other) {
            if (ReferenceEquals(other, null)) {
                return false;
            }
            if (ReferenceEquals(other, this)) {
                return true;
            }
            if (Color != other.Color) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
            int hash = 1;
            if (Color != 0) hash ^= Color.GetHashCode();
            if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
            if (Color != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(Color);
            }
            if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
            int size = 0;
            if (Color != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Color);
            }
            if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AppearanceFlagAutomap other) {
            if (other == null) {
                return;
            }
            if (other.Color != 0) {
                Color = other.Color;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
                switch (tag) {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8: {
                        Color = input.ReadUInt32();
                        break;
                    }
                }
            }
        }

    }

    public sealed partial class AppearanceFlagLensHelp : pb::IMessage<AppearanceFlagLensHelp>
    {
        private static readonly pb::MessageParser<AppearanceFlagLensHelp> _parser = new pb::MessageParser<AppearanceFlagLensHelp>(() => new AppearanceFlagLensHelp());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AppearanceFlagLensHelp> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
            get { return global::OpenTibiaUnity.Protobuf.Appearances.AppearancesReflection.Descriptor.MessageTypes[11]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlagLensHelp() {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlagLensHelp(AppearanceFlagLensHelp other) : this() {
            iD_ = other.iD_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlagLensHelp Clone() {
            return new AppearanceFlagLensHelp(this);
        }

        /// <summary>Field number for the "iD" field.</summary>
        public const int _idFieldNumber = 1;
        private uint iD_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint _id {
            get { return iD_; }
            set {
                iD_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
            return Equals(other as AppearanceFlagLensHelp);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AppearanceFlagLensHelp other) {
            if (ReferenceEquals(other, null)) {
                return false;
            }
            if (ReferenceEquals(other, this)) {
                return true;
            }
            if (_id != other._id) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
            int hash = 1;
            if (_id != 0) hash ^= _id.GetHashCode();
            if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
            if (_id != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(_id);
            }
            if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
            int size = 0;
            if (_id != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(_id);
            }
            if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AppearanceFlagLensHelp other) {
            if (other == null) {
                return;
            }
            if (other._id != 0) {
                _id = other._id;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
                switch (tag) {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8: {
                        _id = input.ReadUInt32();
                        break;
                    }
                }
            }
        }

    }

    public sealed partial class AppearanceFlagClothes : pb::IMessage<AppearanceFlagClothes>
    {
        private static readonly pb::MessageParser<AppearanceFlagClothes> _parser = new pb::MessageParser<AppearanceFlagClothes>(() => new AppearanceFlagClothes());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AppearanceFlagClothes> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
            get { return global::OpenTibiaUnity.Protobuf.Appearances.AppearancesReflection.Descriptor.MessageTypes[12]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlagClothes() {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlagClothes(AppearanceFlagClothes other) : this() {
            slot_ = other.slot_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlagClothes Clone() {
            return new AppearanceFlagClothes(this);
        }

        /// <summary>Field number for the "slot" field.</summary>
        public const int SlotFieldNumber = 1;
        private uint slot_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Slot {
            get { return slot_; }
            set {
                slot_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
            return Equals(other as AppearanceFlagClothes);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AppearanceFlagClothes other) {
            if (ReferenceEquals(other, null)) {
                return false;
            }
            if (ReferenceEquals(other, this)) {
                return true;
            }
            if (Slot != other.Slot) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
            int hash = 1;
            if (Slot != 0) hash ^= Slot.GetHashCode();
            if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
            if (Slot != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(Slot);
            }
            if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
            int size = 0;
            if (Slot != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Slot);
            }
            if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AppearanceFlagClothes other) {
            if (other == null) {
                return;
            }
            if (other.Slot != 0) {
                Slot = other.Slot;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
                switch (tag) {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8: {
                        Slot = input.ReadUInt32();
                        break;
                    }
                }
            }
        }

    }

    public sealed partial class AppearanceFlagMarket : pb::IMessage<AppearanceFlagMarket>
    {
        private static readonly pb::MessageParser<AppearanceFlagMarket> _parser = new pb::MessageParser<AppearanceFlagMarket>(() => new AppearanceFlagMarket());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AppearanceFlagMarket> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
            get { return global::OpenTibiaUnity.Protobuf.Appearances.AppearancesReflection.Descriptor.MessageTypes[13]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlagMarket() {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlagMarket(AppearanceFlagMarket other) : this() {
            category_ = other.category_;
            tradeAsObject_id_ = other.tradeAsObject_id_;
            showAsObject_id_ = other.showAsObject_id_;
            restrictToProfession_ = other.restrictToProfession_;
            minimumLevel_ = other.minimumLevel_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlagMarket Clone() {
            return new AppearanceFlagMarket(this);
        }

        /// <summary>Field number for the "category" field.</summary>
        public const int CategoryFieldNumber = 1;
        private global::OpenTibiaUnity.Protobuf.Shared.ItemCategory category_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::OpenTibiaUnity.Protobuf.Shared.ItemCategory Category {
            get { return category_; }
            set {
                category_ = value;
            }
        }

        /// <summary>Field number for the "tradeAsObject_id" field.</summary>
        public const int TradeAsObject_idFieldNumber = 2;
        private uint tradeAsObject_id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TradeAsObject_id {
            get { return tradeAsObject_id_; }
            set {
                tradeAsObject_id_ = value;
            }
        }

        /// <summary>Field number for the "showAsObject_id" field.</summary>
        public const int ShowAsObject_idFieldNumber = 3;
        private uint showAsObject_id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ShowAsObject_id {
            get { return showAsObject_id_; }
            set {
                showAsObject_id_ = value;
            }
        }

        /// <summary>Field number for the "restrictToProfession" field.</summary>
        public const int RestrictToProfessionFieldNumber = 4;
        private uint restrictToProfession_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint RestrictToProfession {
            get { return restrictToProfession_; }
            set {
                restrictToProfession_ = value;
            }
        }

        /// <summary>Field number for the "minimumLevel" field.</summary>
        public const int MinimumLevelFieldNumber = 5;
        private uint minimumLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MinimumLevel {
            get { return minimumLevel_; }
            set {
                minimumLevel_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
            return Equals(other as AppearanceFlagMarket);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AppearanceFlagMarket other) {
            if (ReferenceEquals(other, null)) {
                return false;
            }
            if (ReferenceEquals(other, this)) {
                return true;
            }
            if (Category != other.Category) return false;
            if (TradeAsObject_id != other.TradeAsObject_id) return false;
            if (ShowAsObject_id != other.ShowAsObject_id) return false;
            if (RestrictToProfession != other.RestrictToProfession) return false;
            if (MinimumLevel != other.MinimumLevel) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
            int hash = 1;
            if (Category != 0) hash ^= Category.GetHashCode();
            if (TradeAsObject_id != 0) hash ^= TradeAsObject_id.GetHashCode();
            if (ShowAsObject_id != 0) hash ^= ShowAsObject_id.GetHashCode();
            if (RestrictToProfession != 0) hash ^= RestrictToProfession.GetHashCode();
            if (MinimumLevel != 0) hash ^= MinimumLevel.GetHashCode();
            if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
            if (Category != 0) {
                output.WriteRawTag(8);
                output.WriteEnum((int)Category);
            }
            if (TradeAsObject_id != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(TradeAsObject_id);
            }
            if (ShowAsObject_id != 0) {
                output.WriteRawTag(24);
                output.WriteUInt32(ShowAsObject_id);
            }
            if (RestrictToProfession != 0) {
                output.WriteRawTag(32);
                output.WriteUInt32(RestrictToProfession);
            }
            if (MinimumLevel != 0) {
                output.WriteRawTag(40);
                output.WriteUInt32(MinimumLevel);
            }
            if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
            int size = 0;
            if (Category != 0) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Category);
            }
            if (TradeAsObject_id != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TradeAsObject_id);
            }
            if (ShowAsObject_id != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShowAsObject_id);
            }
            if (RestrictToProfession != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RestrictToProfession);
            }
            if (MinimumLevel != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinimumLevel);
            }
            if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AppearanceFlagMarket other) {
            if (other == null) {
                return;
            }
            if (other.Category != 0) {
                Category = other.Category;
            }
            if (other.TradeAsObject_id != 0) {
                TradeAsObject_id = other.TradeAsObject_id;
            }
            if (other.ShowAsObject_id != 0) {
                ShowAsObject_id = other.ShowAsObject_id;
            }
            if (other.RestrictToProfession != 0) {
                RestrictToProfession = other.RestrictToProfession;
            }
            if (other.MinimumLevel != 0) {
                MinimumLevel = other.MinimumLevel;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
                switch (tag) {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8: {
                        Category = (global::OpenTibiaUnity.Protobuf.Shared.ItemCategory)input.ReadEnum();
                        break;
                    }
                    case 16: {
                        TradeAsObject_id = input.ReadUInt32();
                        break;
                    }
                    case 24: {
                        ShowAsObject_id = input.ReadUInt32();
                        break;
                    }
                    case 32: {
                        RestrictToProfession = input.ReadUInt32();
                        break;
                    }
                    case 40: {
                        MinimumLevel = input.ReadUInt32();
                        break;
                    }
                }
            }
        }

    }

    public sealed partial class AppearanceFlagDefaultAction : pb::IMessage<AppearanceFlagDefaultAction>
    {
        private static readonly pb::MessageParser<AppearanceFlagDefaultAction> _parser = new pb::MessageParser<AppearanceFlagDefaultAction>(() => new AppearanceFlagDefaultAction());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AppearanceFlagDefaultAction> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
            get { return global::OpenTibiaUnity.Protobuf.Appearances.AppearancesReflection.Descriptor.MessageTypes[14]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlagDefaultAction() {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlagDefaultAction(AppearanceFlagDefaultAction other) : this() {
            action_ = other.action_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlagDefaultAction Clone() {
            return new AppearanceFlagDefaultAction(this);
        }

        /// <summary>Field number for the "action" field.</summary>
        public const int ActionFieldNumber = 1;
        private global::OpenTibiaUnity.Protobuf.Shared.PlayerAction action_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::OpenTibiaUnity.Protobuf.Shared.PlayerAction Action {
            get { return action_; }
            set {
                action_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
            return Equals(other as AppearanceFlagDefaultAction);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AppearanceFlagDefaultAction other) {
            if (ReferenceEquals(other, null)) {
                return false;
            }
            if (ReferenceEquals(other, this)) {
                return true;
            }
            if (Action != other.Action) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
            int hash = 1;
            if (Action != 0) hash ^= Action.GetHashCode();
            if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
            if (Action != 0) {
                output.WriteRawTag(8);
                output.WriteEnum((int)Action);
            }
            if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
            int size = 0;
            if (Action != 0) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Action);
            }
            if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AppearanceFlagDefaultAction other) {
            if (other == null) {
                return;
            }
            if (other.Action != 0) {
                Action = other.Action;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
                switch (tag) {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8: {
                        Action = (global::OpenTibiaUnity.Protobuf.Shared.PlayerAction)input.ReadEnum();
                        break;
                    }
                }
            }
        }

    }

    public sealed partial class AppearanceFlagNPC : pb::IMessage<AppearanceFlagNPC>
    {
        private static readonly pb::MessageParser<AppearanceFlagNPC> _parser = new pb::MessageParser<AppearanceFlagNPC>(() => new AppearanceFlagNPC());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AppearanceFlagNPC> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
            get { return global::OpenTibiaUnity.Protobuf.Appearances.AppearancesReflection.Descriptor.MessageTypes[15]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlagNPC() {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlagNPC(AppearanceFlagNPC other) : this() {
            name_ = other.name_;
            location_ = other.location_;
            salePrice_ = other.salePrice_;
            buyPrice_ = other.buyPrice_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlagNPC Clone() {
            return new AppearanceFlagNPC(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
            get { return name_; }
            set {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "location" field.</summary>
        public const int LocationFieldNumber = 2;
        private string location_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Location {
            get { return location_; }
            set {
                location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "salePrice" field.</summary>
        public const int SalePriceFieldNumber = 3;
        private uint salePrice_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SalePrice {
            get { return salePrice_; }
            set {
                salePrice_ = value;
            }
        }

        /// <summary>Field number for the "buyPrice" field.</summary>
        public const int BuyPriceFieldNumber = 4;
        private uint buyPrice_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint BuyPrice {
            get { return buyPrice_; }
            set {
                buyPrice_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
            return Equals(other as AppearanceFlagNPC);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AppearanceFlagNPC other) {
            if (ReferenceEquals(other, null)) {
                return false;
            }
            if (ReferenceEquals(other, this)) {
                return true;
            }
            if (Name != other.Name) return false;
            if (Location != other.Location) return false;
            if (SalePrice != other.SalePrice) return false;
            if (BuyPrice != other.BuyPrice) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
            int hash = 1;
            if (Name.Length != 0) hash ^= Name.GetHashCode();
            if (Location.Length != 0) hash ^= Location.GetHashCode();
            if (SalePrice != 0) hash ^= SalePrice.GetHashCode();
            if (BuyPrice != 0) hash ^= BuyPrice.GetHashCode();
            if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
            if (Name.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(Name);
            }
            if (Location.Length != 0) {
                output.WriteRawTag(18);
                output.WriteString(Location);
            }
            if (SalePrice != 0) {
                output.WriteRawTag(24);
                output.WriteUInt32(SalePrice);
            }
            if (BuyPrice != 0) {
                output.WriteRawTag(32);
                output.WriteUInt32(BuyPrice);
            }
            if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
            int size = 0;
            if (Name.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
            }
            if (Location.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
            }
            if (SalePrice != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SalePrice);
            }
            if (BuyPrice != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BuyPrice);
            }
            if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AppearanceFlagNPC other) {
            if (other == null) {
                return;
            }
            if (other.Name.Length != 0) {
                Name = other.Name;
            }
            if (other.Location.Length != 0) {
                Location = other.Location;
            }
            if (other.SalePrice != 0) {
                SalePrice = other.SalePrice;
            }
            if (other.BuyPrice != 0) {
                BuyPrice = other.BuyPrice;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
                switch (tag) {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10: {
                        Name = input.ReadString();
                        break;
                    }
                    case 18: {
                        Location = input.ReadString();
                        break;
                    }
                    case 24: {
                        SalePrice = input.ReadUInt32();
                        break;
                    }
                    case 32: {
                        BuyPrice = input.ReadUInt32();
                        break;
                    }
                }
            }
        }

    }

    public sealed partial class AppearanceFlagChangedToExpire : pb::IMessage<AppearanceFlagChangedToExpire>
    {
        private static readonly pb::MessageParser<AppearanceFlagChangedToExpire> _parser = new pb::MessageParser<AppearanceFlagChangedToExpire>(() => new AppearanceFlagChangedToExpire());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AppearanceFlagChangedToExpire> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
            get { return global::OpenTibiaUnity.Protobuf.Appearances.AppearancesReflection.Descriptor.MessageTypes[16]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlagChangedToExpire() {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlagChangedToExpire(AppearanceFlagChangedToExpire other) : this() {
            formerObjectTypeId_ = other.formerObjectTypeId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlagChangedToExpire Clone() {
            return new AppearanceFlagChangedToExpire(this);
        }

        /// <summary>Field number for the "formerObjectTypeId" field.</summary>
        public const int FormerObjectTypeIdFieldNumber = 1;
        private uint formerObjectTypeId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint FormerObjectTypeId {
            get { return formerObjectTypeId_; }
            set {
                formerObjectTypeId_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
            return Equals(other as AppearanceFlagChangedToExpire);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AppearanceFlagChangedToExpire other) {
            if (ReferenceEquals(other, null)) {
                return false;
            }
            if (ReferenceEquals(other, this)) {
                return true;
            }
            if (FormerObjectTypeId != other.FormerObjectTypeId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
            int hash = 1;
            if (FormerObjectTypeId != 0) hash ^= FormerObjectTypeId.GetHashCode();
            if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
            if (FormerObjectTypeId != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(FormerObjectTypeId);
            }
            if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
            int size = 0;
            if (FormerObjectTypeId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FormerObjectTypeId);
            }
            if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AppearanceFlagChangedToExpire other) {
            if (other == null) {
                return;
            }
            if (other.FormerObjectTypeId != 0) {
                FormerObjectTypeId = other.FormerObjectTypeId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
                switch (tag) {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8: {
                        FormerObjectTypeId = input.ReadUInt32();
                        break;
                    }
                }
            }
        }

    }

    public sealed partial class AppearanceFlagCyclopedia : pb::IMessage<AppearanceFlagCyclopedia>
    {
        private static readonly pb::MessageParser<AppearanceFlagCyclopedia> _parser = new pb::MessageParser<AppearanceFlagCyclopedia>(() => new AppearanceFlagCyclopedia());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AppearanceFlagCyclopedia> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
            get { return global::OpenTibiaUnity.Protobuf.Appearances.AppearancesReflection.Descriptor.MessageTypes[17]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlagCyclopedia() {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlagCyclopedia(AppearanceFlagCyclopedia other) : this() {
            cyclopediaType_ = other.cyclopediaType_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AppearanceFlagCyclopedia Clone() {
            return new AppearanceFlagCyclopedia(this);
        }

        /// <summary>Field number for the "cyclopedia_type" field.</summary>
        public const int CyclopediaTypeFieldNumber = 1;
        private uint cyclopediaType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint CyclopediaType {
            get { return cyclopediaType_; }
            set {
                cyclopediaType_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
            return Equals(other as AppearanceFlagCyclopedia);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AppearanceFlagCyclopedia other) {
            if (ReferenceEquals(other, null)) {
                return false;
            }
            if (ReferenceEquals(other, this)) {
                return true;
            }
            if (CyclopediaType != other.CyclopediaType) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
            int hash = 1;
            if (CyclopediaType != 0) hash ^= CyclopediaType.GetHashCode();
            if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
            if (CyclopediaType != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(CyclopediaType);
            }
            if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
            int size = 0;
            if (CyclopediaType != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CyclopediaType);
            }
            if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AppearanceFlagCyclopedia other) {
            if (other == null) {
                return;
            }
            if (other.CyclopediaType != 0) {
                CyclopediaType = other.CyclopediaType;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
                switch (tag) {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8: {
                        CyclopediaType = input.ReadUInt32();
                        break;
                    }
                }
            }
        }

    }

    public sealed partial class SpecialMeaningAppearanceIds : pb::IMessage<SpecialMeaningAppearanceIds>
    {
        private static readonly pb::MessageParser<SpecialMeaningAppearanceIds> _parser = new pb::MessageParser<SpecialMeaningAppearanceIds>(() => new SpecialMeaningAppearanceIds());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SpecialMeaningAppearanceIds> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
            get { return global::OpenTibiaUnity.Protobuf.Appearances.AppearancesReflection.Descriptor.MessageTypes[18]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SpecialMeaningAppearanceIds() {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SpecialMeaningAppearanceIds(SpecialMeaningAppearanceIds other) : this() {
            goldCoinId_ = other.goldCoinId_;
            platinumCoinId_ = other.platinumCoinId_;
            crystalCoinId_ = other.crystalCoinId_;
            tibiaCoidId_ = other.tibiaCoidId_;
            stampedLetterId_ = other.stampedLetterId_;
            supplyStashId_ = other.supplyStashId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SpecialMeaningAppearanceIds Clone() {
            return new SpecialMeaningAppearanceIds(this);
        }

        /// <summary>Field number for the "goldCoinId" field.</summary>
        public const int GoldCoinIdFieldNumber = 1;
        private uint goldCoinId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GoldCoinId {
            get { return goldCoinId_; }
            set {
                goldCoinId_ = value;
            }
        }

        /// <summary>Field number for the "platinumCoinId" field.</summary>
        public const int PlatinumCoinIdFieldNumber = 2;
        private uint platinumCoinId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PlatinumCoinId {
            get { return platinumCoinId_; }
            set {
                platinumCoinId_ = value;
            }
        }

        /// <summary>Field number for the "crystalCoinId" field.</summary>
        public const int CrystalCoinIdFieldNumber = 3;
        private uint crystalCoinId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint CrystalCoinId {
            get { return crystalCoinId_; }
            set {
                crystalCoinId_ = value;
            }
        }

        /// <summary>Field number for the "tibiaCoidId" field.</summary>
        public const int TibiaCoidIdFieldNumber = 4;
        private uint tibiaCoidId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TibiaCoidId {
            get { return tibiaCoidId_; }
            set {
                tibiaCoidId_ = value;
            }
        }

        /// <summary>Field number for the "stampedLetterId" field.</summary>
        public const int StampedLetterIdFieldNumber = 5;
        private uint stampedLetterId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint StampedLetterId {
            get { return stampedLetterId_; }
            set {
                stampedLetterId_ = value;
            }
        }

        /// <summary>Field number for the "supplyStashId" field.</summary>
        public const int SupplyStashIdFieldNumber = 6;
        private uint supplyStashId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SupplyStashId {
            get { return supplyStashId_; }
            set {
                supplyStashId_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
            return Equals(other as SpecialMeaningAppearanceIds);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SpecialMeaningAppearanceIds other) {
            if (ReferenceEquals(other, null)) {
                return false;
            }
            if (ReferenceEquals(other, this)) {
                return true;
            }
            if (GoldCoinId != other.GoldCoinId) return false;
            if (PlatinumCoinId != other.PlatinumCoinId) return false;
            if (CrystalCoinId != other.CrystalCoinId) return false;
            if (TibiaCoidId != other.TibiaCoidId) return false;
            if (StampedLetterId != other.StampedLetterId) return false;
            if (SupplyStashId != other.SupplyStashId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
            int hash = 1;
            if (GoldCoinId != 0) hash ^= GoldCoinId.GetHashCode();
            if (PlatinumCoinId != 0) hash ^= PlatinumCoinId.GetHashCode();
            if (CrystalCoinId != 0) hash ^= CrystalCoinId.GetHashCode();
            if (TibiaCoidId != 0) hash ^= TibiaCoidId.GetHashCode();
            if (StampedLetterId != 0) hash ^= StampedLetterId.GetHashCode();
            if (SupplyStashId != 0) hash ^= SupplyStashId.GetHashCode();
            if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
            if (GoldCoinId != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(GoldCoinId);
            }
            if (PlatinumCoinId != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(PlatinumCoinId);
            }
            if (CrystalCoinId != 0) {
                output.WriteRawTag(24);
                output.WriteUInt32(CrystalCoinId);
            }
            if (TibiaCoidId != 0) {
                output.WriteRawTag(32);
                output.WriteUInt32(TibiaCoidId);
            }
            if (StampedLetterId != 0) {
                output.WriteRawTag(40);
                output.WriteUInt32(StampedLetterId);
            }
            if (SupplyStashId != 0) {
                output.WriteRawTag(48);
                output.WriteUInt32(SupplyStashId);
            }
            if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
            int size = 0;
            if (GoldCoinId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GoldCoinId);
            }
            if (PlatinumCoinId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlatinumCoinId);
            }
            if (CrystalCoinId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CrystalCoinId);
            }
            if (TibiaCoidId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TibiaCoidId);
            }
            if (StampedLetterId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StampedLetterId);
            }
            if (SupplyStashId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SupplyStashId);
            }
            if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SpecialMeaningAppearanceIds other) {
            if (other == null) {
                return;
            }
            if (other.GoldCoinId != 0) {
                GoldCoinId = other.GoldCoinId;
            }
            if (other.PlatinumCoinId != 0) {
                PlatinumCoinId = other.PlatinumCoinId;
            }
            if (other.CrystalCoinId != 0) {
                CrystalCoinId = other.CrystalCoinId;
            }
            if (other.TibiaCoidId != 0) {
                TibiaCoidId = other.TibiaCoidId;
            }
            if (other.StampedLetterId != 0) {
                StampedLetterId = other.StampedLetterId;
            }
            if (other.SupplyStashId != 0) {
                SupplyStashId = other.SupplyStashId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
                switch (tag) {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8: {
                        GoldCoinId = input.ReadUInt32();
                        break;
                    }
                    case 16: {
                        PlatinumCoinId = input.ReadUInt32();
                        break;
                    }
                    case 24: {
                        CrystalCoinId = input.ReadUInt32();
                        break;
                    }
                    case 32: {
                        TibiaCoidId = input.ReadUInt32();
                        break;
                    }
                    case 40: {
                        StampedLetterId = input.ReadUInt32();
                        break;
                    }
                    case 48: {
                        SupplyStashId = input.ReadUInt32();
                        break;
                    }
                }
            }
        }

    }

    public sealed partial class FrameGroup : pb::IMessage<FrameGroup>
    {
        private static readonly pb::MessageParser<FrameGroup> _parser = new pb::MessageParser<FrameGroup>(() => new FrameGroup());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FrameGroup> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
            get { return global::OpenTibiaUnity.Protobuf.Appearances.AppearancesReflection.Descriptor.MessageTypes[19]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FrameGroup() {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FrameGroup(FrameGroup other) : this() {
            type_ = other.type_;
            iD_ = other.iD_;
            spriteInfo_ = other.spriteInfo_ != null ? other.spriteInfo_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FrameGroup Clone() {
            return new FrameGroup(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private global::OpenTibiaUnity.Protobuf.Shared.FrameGroupType type_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::OpenTibiaUnity.Protobuf.Shared.FrameGroupType Type {
            get { return type_; }
            set {
                type_ = value;
            }
        }

        /// <summary>Field number for the "iD" field.</summary>
        public const int _idFieldNumber = 2;
        private uint iD_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint _id {
            get { return iD_; }
            set {
                iD_ = value;
            }
        }

        /// <summary>Field number for the "spriteInfo" field.</summary>
        public const int SpriteInfoFieldNumber = 3;
        private global::OpenTibiaUnity.Protobuf.Appearances.SpriteInfo spriteInfo_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::OpenTibiaUnity.Protobuf.Appearances.SpriteInfo SpriteInfo {
            get { return spriteInfo_; }
            set {
                spriteInfo_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
            return Equals(other as FrameGroup);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FrameGroup other) {
            if (ReferenceEquals(other, null)) {
                return false;
            }
            if (ReferenceEquals(other, this)) {
                return true;
            }
            if (Type != other.Type) return false;
            if (_id != other._id) return false;
            if (!object.Equals(SpriteInfo, other.SpriteInfo)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
            int hash = 1;
            if (Type != 0) hash ^= Type.GetHashCode();
            if (_id != 0) hash ^= _id.GetHashCode();
            if (spriteInfo_ != null) hash ^= SpriteInfo.GetHashCode();
            if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
            if (Type != 0) {
                output.WriteRawTag(8);
                output.WriteEnum((int)Type);
            }
            if (_id != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(_id);
            }
            if (spriteInfo_ != null) {
                output.WriteRawTag(26);
                output.WriteMessage(SpriteInfo);
            }
            if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
            int size = 0;
            if (Type != 0) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
            }
            if (_id != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(_id);
            }
            if (spriteInfo_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpriteInfo);
            }
            if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FrameGroup other) {
            if (other == null) {
                return;
            }
            if (other.Type != 0) {
                Type = other.Type;
            }
            if (other._id != 0) {
                _id = other._id;
            }
            if (other.spriteInfo_ != null) {
                if (spriteInfo_ == null) {
                    SpriteInfo = new global::OpenTibiaUnity.Protobuf.Appearances.SpriteInfo();
                }
                SpriteInfo.MergeFrom(other.SpriteInfo);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
                switch (tag) {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8: {
                        Type = (global::OpenTibiaUnity.Protobuf.Shared.FrameGroupType)input.ReadEnum();
                        break;
                    }
                    case 16: {
                        _id = input.ReadUInt32();
                        break;
                    }
                    case 26: {
                        if (spriteInfo_ == null) {
                            SpriteInfo = new global::OpenTibiaUnity.Protobuf.Appearances.SpriteInfo();
                        }
                        input.ReadMessage(SpriteInfo);
                        break;
                    }
                }
            }
        }

    }

    public sealed partial class SpriteInfo : pb::IMessage<SpriteInfo>
    {
        private static readonly pb::MessageParser<SpriteInfo> _parser = new pb::MessageParser<SpriteInfo>(() => new SpriteInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SpriteInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
            get { return global::OpenTibiaUnity.Protobuf.Appearances.AppearancesReflection.Descriptor.MessageTypes[20]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SpriteInfo() {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SpriteInfo(SpriteInfo other) : this() {
            patternWidth_ = other.patternWidth_;
            patternHeight_ = other.patternHeight_;
            patternDepth_ = other.patternDepth_;
            layers_ = other.layers_;
            phases_ = other.phases_;
            sprite_ids_ = other.sprite_ids_.Clone();
            boundingSquare_ = other.boundingSquare_;
            animation_ = other.animation_ != null ? other.animation_.Clone() : null;
            isOpaque_ = other.isOpaque_;
            boundingBoxesPerDirection_ = other.boundingBoxesPerDirection_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SpriteInfo Clone() {
            return new SpriteInfo(this);
        }

        /// <summary>Field number for the "patternWidth" field.</summary>
        public const int PatternWidthFieldNumber = 1;
        private uint patternWidth_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PatternWidth {
            get { return patternWidth_; }
            set {
                patternWidth_ = value;
            }
        }

        /// <summary>Field number for the "patternHeight" field.</summary>
        public const int PatternHeightFieldNumber = 2;
        private uint patternHeight_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PatternHeight {
            get { return patternHeight_; }
            set {
                patternHeight_ = value;
            }
        }

        /// <summary>Field number for the "patternDepth" field.</summary>
        public const int PatternDepthFieldNumber = 3;
        private uint patternDepth_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PatternDepth {
            get { return patternDepth_; }
            set {
                patternDepth_ = value;
            }
        }

        /// <summary>Field number for the "layers" field.</summary>
        public const int LayersFieldNumber = 4;
        private uint layers_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Layers {
            get { return layers_; }
            set {
                layers_ = value;
            }
        }

        /// <summary>Field number for the "phases" field.</summary>
        public const int PhasesFieldNumber = 5;
        private uint phases_;
        /// <summary>
        /// legacy animation purposes 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Phases {
            get { return phases_; }
            set {
                phases_ = value;
            }
        }

        /// <summary>Field number for the "sprite_ids" field.</summary>
        public const int Sprite_idsFieldNumber = 6;
        private static readonly pb::FieldCodec<uint> _repeated_sprite_ids_codec
            = pb::FieldCodec.ForUInt32(50);
        private readonly pbc::RepeatedField<uint> sprite_ids_ = new pbc::RepeatedField<uint>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> Sprite_ids {
            get { return sprite_ids_; }
        }

        /// <summary>Field number for the "boundingSquare" field.</summary>
        public const int BoundingSquareFieldNumber = 7;
        private uint boundingSquare_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint BoundingSquare {
            get { return boundingSquare_; }
            set {
                boundingSquare_ = value;
            }
        }

        /// <summary>Field number for the "animation" field.</summary>
        public const int AnimationFieldNumber = 8;
        private global::OpenTibiaUnity.Protobuf.Appearances.SpriteAnimation animation_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::OpenTibiaUnity.Protobuf.Appearances.SpriteAnimation Animation {
            get { return animation_; }
            set {
                animation_ = value;
            }
        }

        /// <summary>Field number for the "isOpaque" field.</summary>
        public const int IsOpaqueFieldNumber = 9;
        private bool isOpaque_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsOpaque {
            get { return isOpaque_; }
            set {
                isOpaque_ = value;
            }
        }

        /// <summary>Field number for the "boundingBoxesPerDirection" field.</summary>
        public const int BoundingBoxesPerDirectionFieldNumber = 10;
        private static readonly pb::FieldCodec<global::OpenTibiaUnity.Protobuf.Appearances.Box> _repeated_boundingBoxesPerDirection_codec
            = pb::FieldCodec.ForMessage(82, global::OpenTibiaUnity.Protobuf.Appearances.Box.Parser);
        private readonly pbc::RepeatedField<global::OpenTibiaUnity.Protobuf.Appearances.Box> boundingBoxesPerDirection_ = new pbc::RepeatedField<global::OpenTibiaUnity.Protobuf.Appearances.Box>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::OpenTibiaUnity.Protobuf.Appearances.Box> BoundingBoxesPerDirection {
            get { return boundingBoxesPerDirection_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
            return Equals(other as SpriteInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SpriteInfo other) {
            if (ReferenceEquals(other, null)) {
                return false;
            }
            if (ReferenceEquals(other, this)) {
                return true;
            }
            if (PatternWidth != other.PatternWidth) return false;
            if (PatternHeight != other.PatternHeight) return false;
            if (PatternDepth != other.PatternDepth) return false;
            if (Layers != other.Layers) return false;
            if (Phases != other.Phases) return false;
            if (!sprite_ids_.Equals(other.sprite_ids_)) return false;
            if (BoundingSquare != other.BoundingSquare) return false;
            if (!object.Equals(Animation, other.Animation)) return false;
            if (IsOpaque != other.IsOpaque) return false;
            if (!boundingBoxesPerDirection_.Equals(other.boundingBoxesPerDirection_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
            int hash = 1;
            if (PatternWidth != 0) hash ^= PatternWidth.GetHashCode();
            if (PatternHeight != 0) hash ^= PatternHeight.GetHashCode();
            if (PatternDepth != 0) hash ^= PatternDepth.GetHashCode();
            if (Layers != 0) hash ^= Layers.GetHashCode();
            if (Phases != 0) hash ^= Phases.GetHashCode();
            hash ^= sprite_ids_.GetHashCode();
            if (BoundingSquare != 0) hash ^= BoundingSquare.GetHashCode();
            if (animation_ != null) hash ^= Animation.GetHashCode();
            if (IsOpaque != false) hash ^= IsOpaque.GetHashCode();
            hash ^= boundingBoxesPerDirection_.GetHashCode();
            if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
            if (PatternWidth != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(PatternWidth);
            }
            if (PatternHeight != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(PatternHeight);
            }
            if (PatternDepth != 0) {
                output.WriteRawTag(24);
                output.WriteUInt32(PatternDepth);
            }
            if (Layers != 0) {
                output.WriteRawTag(32);
                output.WriteUInt32(Layers);
            }
            if (Phases != 0) {
                output.WriteRawTag(40);
                output.WriteUInt32(Phases);
            }
            sprite_ids_.WriteTo(output, _repeated_sprite_ids_codec);
            if (BoundingSquare != 0) {
                output.WriteRawTag(56);
                output.WriteUInt32(BoundingSquare);
            }
            if (animation_ != null) {
                output.WriteRawTag(66);
                output.WriteMessage(Animation);
            }
            if (IsOpaque != false) {
                output.WriteRawTag(72);
                output.WriteBool(IsOpaque);
            }
            boundingBoxesPerDirection_.WriteTo(output, _repeated_boundingBoxesPerDirection_codec);
            if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
            int size = 0;
            if (PatternWidth != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PatternWidth);
            }
            if (PatternHeight != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PatternHeight);
            }
            if (PatternDepth != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PatternDepth);
            }
            if (Layers != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Layers);
            }
            if (Phases != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Phases);
            }
            size += sprite_ids_.CalculateSize(_repeated_sprite_ids_codec);
            if (BoundingSquare != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BoundingSquare);
            }
            if (animation_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Animation);
            }
            if (IsOpaque != false) {
                size += 1 + 1;
            }
            size += boundingBoxesPerDirection_.CalculateSize(_repeated_boundingBoxesPerDirection_codec);
            if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SpriteInfo other) {
            if (other == null) {
                return;
            }
            if (other.PatternWidth != 0) {
                PatternWidth = other.PatternWidth;
            }
            if (other.PatternHeight != 0) {
                PatternHeight = other.PatternHeight;
            }
            if (other.PatternDepth != 0) {
                PatternDepth = other.PatternDepth;
            }
            if (other.Layers != 0) {
                Layers = other.Layers;
            }
            if (other.Phases != 0) {
                Phases = other.Phases;
            }
            sprite_ids_.Add(other.sprite_ids_);
            if (other.BoundingSquare != 0) {
                BoundingSquare = other.BoundingSquare;
            }
            if (other.animation_ != null) {
                if (animation_ == null) {
                    Animation = new global::OpenTibiaUnity.Protobuf.Appearances.SpriteAnimation();
                }
                Animation.MergeFrom(other.Animation);
            }
            if (other.IsOpaque != false) {
                IsOpaque = other.IsOpaque;
            }
            boundingBoxesPerDirection_.Add(other.boundingBoxesPerDirection_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
                switch (tag) {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8: {
                        PatternWidth = input.ReadUInt32();
                        break;
                    }
                    case 16: {
                        PatternHeight = input.ReadUInt32();
                        break;
                    }
                    case 24: {
                        PatternDepth = input.ReadUInt32();
                        break;
                    }
                    case 32: {
                        Layers = input.ReadUInt32();
                        break;
                    }
                    case 40: {
                        Phases = input.ReadUInt32();
                        break;
                    }
                    case 50:
                    case 48: {
                        sprite_ids_.AddEntriesFrom(input, _repeated_sprite_ids_codec);
                        break;
                    }
                    case 56: {
                        BoundingSquare = input.ReadUInt32();
                        break;
                    }
                    case 66: {
                        if (animation_ == null) {
                            Animation = new global::OpenTibiaUnity.Protobuf.Appearances.SpriteAnimation();
                        }
                        input.ReadMessage(Animation);
                        break;
                    }
                    case 72: {
                        IsOpaque = input.ReadBool();
                        break;
                    }
                    case 82: {
                        boundingBoxesPerDirection_.AddEntriesFrom(input, _repeated_boundingBoxesPerDirection_codec);
                        break;
                    }
                }
            }
        }

    }

    public sealed partial class Box : pb::IMessage<Box>
    {
        private static readonly pb::MessageParser<Box> _parser = new pb::MessageParser<Box>(() => new Box());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Box> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
            get { return global::OpenTibiaUnity.Protobuf.Appearances.AppearancesReflection.Descriptor.MessageTypes[21]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Box() {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Box(Box other) : this() {
            x_ = other.x_;
            y_ = other.y_;
            width_ = other.width_;
            height_ = other.height_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Box Clone() {
            return new Box(this);
        }

        /// <summary>Field number for the "x" field.</summary>
        public const int XFieldNumber = 1;
        private uint x_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint X {
            get { return x_; }
            set {
                x_ = value;
            }
        }

        /// <summary>Field number for the "y" field.</summary>
        public const int YFieldNumber = 2;
        private uint y_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Y {
            get { return y_; }
            set {
                y_ = value;
            }
        }

        /// <summary>Field number for the "width" field.</summary>
        public const int WidthFieldNumber = 3;
        private uint width_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Width {
            get { return width_; }
            set {
                width_ = value;
            }
        }

        /// <summary>Field number for the "height" field.</summary>
        public const int HeightFieldNumber = 4;
        private uint height_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Height {
            get { return height_; }
            set {
                height_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
            return Equals(other as Box);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Box other) {
            if (ReferenceEquals(other, null)) {
                return false;
            }
            if (ReferenceEquals(other, this)) {
                return true;
            }
            if (X != other.X) return false;
            if (Y != other.Y) return false;
            if (Width != other.Width) return false;
            if (Height != other.Height) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
            int hash = 1;
            if (X != 0) hash ^= X.GetHashCode();
            if (Y != 0) hash ^= Y.GetHashCode();
            if (Width != 0) hash ^= Width.GetHashCode();
            if (Height != 0) hash ^= Height.GetHashCode();
            if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
            if (X != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(X);
            }
            if (Y != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(Y);
            }
            if (Width != 0) {
                output.WriteRawTag(24);
                output.WriteUInt32(Width);
            }
            if (Height != 0) {
                output.WriteRawTag(32);
                output.WriteUInt32(Height);
            }
            if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
            int size = 0;
            if (X != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(X);
            }
            if (Y != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Y);
            }
            if (Width != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
            }
            if (Height != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Height);
            }
            if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Box other) {
            if (other == null) {
                return;
            }
            if (other.X != 0) {
                X = other.X;
            }
            if (other.Y != 0) {
                Y = other.Y;
            }
            if (other.Width != 0) {
                Width = other.Width;
            }
            if (other.Height != 0) {
                Height = other.Height;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
                switch (tag) {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8: {
                        X = input.ReadUInt32();
                        break;
                    }
                    case 16: {
                        Y = input.ReadUInt32();
                        break;
                    }
                    case 24: {
                        Width = input.ReadUInt32();
                        break;
                    }
                    case 32: {
                        Height = input.ReadUInt32();
                        break;
                    }
                }
            }
        }

    }

    public sealed partial class SpriteAnimation : pb::IMessage<SpriteAnimation>
    {
        private static readonly pb::MessageParser<SpriteAnimation> _parser = new pb::MessageParser<SpriteAnimation>(() => new SpriteAnimation());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SpriteAnimation> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
            get { return global::OpenTibiaUnity.Protobuf.Appearances.AppearancesReflection.Descriptor.MessageTypes[22]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SpriteAnimation() {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SpriteAnimation(SpriteAnimation other) : this() {
            defaultStartPhase_ = other.defaultStartPhase_;
            synchornized_ = other.synchornized_;
            randomStartPhase_ = other.randomStartPhase_;
            loopType_ = other.loopType_;
            loopCount_ = other.loopCount_;
            spritePhases_ = other.spritePhases_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SpriteAnimation Clone() {
            return new SpriteAnimation(this);
        }

        /// <summary>Field number for the "defaultStartPhase" field.</summary>
        public const int DefaultStartPhaseFieldNumber = 1;
        private uint defaultStartPhase_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DefaultStartPhase {
            get { return defaultStartPhase_; }
            set {
                defaultStartPhase_ = value;
            }
        }

        /// <summary>Field number for the "synchornized" field.</summary>
        public const int SynchornizedFieldNumber = 2;
        private bool synchornized_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Synchornized {
            get { return synchornized_; }
            set {
                synchornized_ = value;
            }
        }

        /// <summary>Field number for the "randomStartPhase" field.</summary>
        public const int RandomStartPhaseFieldNumber = 3;
        private bool randomStartPhase_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool RandomStartPhase {
            get { return randomStartPhase_; }
            set {
                randomStartPhase_ = value;
            }
        }

        /// <summary>Field number for the "loopType" field.</summary>
        public const int LoopTypeFieldNumber = 4;
        private global::OpenTibiaUnity.Protobuf.Shared.AnimationLoopType loopType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::OpenTibiaUnity.Protobuf.Shared.AnimationLoopType LoopType {
            get { return loopType_; }
            set {
                loopType_ = value;
            }
        }

        /// <summary>Field number for the "loopCount" field.</summary>
        public const int LoopCountFieldNumber = 5;
        private uint loopCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint LoopCount {
            get { return loopCount_; }
            set {
                loopCount_ = value;
            }
        }

        /// <summary>Field number for the "spritePhases" field.</summary>
        public const int SpritePhasesFieldNumber = 6;
        private static readonly pb::FieldCodec<global::OpenTibiaUnity.Protobuf.Appearances.SpritePhase> _repeated_spritePhases_codec
            = pb::FieldCodec.ForMessage(50, global::OpenTibiaUnity.Protobuf.Appearances.SpritePhase.Parser);
        private readonly pbc::RepeatedField<global::OpenTibiaUnity.Protobuf.Appearances.SpritePhase> spritePhases_ = new pbc::RepeatedField<global::OpenTibiaUnity.Protobuf.Appearances.SpritePhase>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::OpenTibiaUnity.Protobuf.Appearances.SpritePhase> SpritePhases {
            get { return spritePhases_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
            return Equals(other as SpriteAnimation);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SpriteAnimation other) {
            if (ReferenceEquals(other, null)) {
                return false;
            }
            if (ReferenceEquals(other, this)) {
                return true;
            }
            if (DefaultStartPhase != other.DefaultStartPhase) return false;
            if (Synchornized != other.Synchornized) return false;
            if (RandomStartPhase != other.RandomStartPhase) return false;
            if (LoopType != other.LoopType) return false;
            if (LoopCount != other.LoopCount) return false;
            if (!spritePhases_.Equals(other.spritePhases_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
            int hash = 1;
            if (DefaultStartPhase != 0) hash ^= DefaultStartPhase.GetHashCode();
            if (Synchornized != false) hash ^= Synchornized.GetHashCode();
            if (RandomStartPhase != false) hash ^= RandomStartPhase.GetHashCode();
            if (LoopType != 0) hash ^= LoopType.GetHashCode();
            if (LoopCount != 0) hash ^= LoopCount.GetHashCode();
            hash ^= spritePhases_.GetHashCode();
            if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
            if (DefaultStartPhase != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(DefaultStartPhase);
            }
            if (Synchornized != false) {
                output.WriteRawTag(16);
                output.WriteBool(Synchornized);
            }
            if (RandomStartPhase != false) {
                output.WriteRawTag(24);
                output.WriteBool(RandomStartPhase);
            }
            if (LoopType != 0) {
                output.WriteRawTag(32);
                output.WriteEnum((int)LoopType);
            }
            if (LoopCount != 0) {
                output.WriteRawTag(40);
                output.WriteUInt32(LoopCount);
            }
            spritePhases_.WriteTo(output, _repeated_spritePhases_codec);
            if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
            int size = 0;
            if (DefaultStartPhase != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DefaultStartPhase);
            }
            if (Synchornized != false) {
                size += 1 + 1;
            }
            if (RandomStartPhase != false) {
                size += 1 + 1;
            }
            if (LoopType != 0) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)LoopType);
            }
            if (LoopCount != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LoopCount);
            }
            size += spritePhases_.CalculateSize(_repeated_spritePhases_codec);
            if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SpriteAnimation other) {
            if (other == null) {
                return;
            }
            if (other.DefaultStartPhase != 0) {
                DefaultStartPhase = other.DefaultStartPhase;
            }
            if (other.Synchornized != false) {
                Synchornized = other.Synchornized;
            }
            if (other.RandomStartPhase != false) {
                RandomStartPhase = other.RandomStartPhase;
            }
            if (other.LoopType != 0) {
                LoopType = other.LoopType;
            }
            if (other.LoopCount != 0) {
                LoopCount = other.LoopCount;
            }
            spritePhases_.Add(other.spritePhases_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
                switch (tag) {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8: {
                        DefaultStartPhase = input.ReadUInt32();
                        break;
                    }
                    case 16: {
                        Synchornized = input.ReadBool();
                        break;
                    }
                    case 24: {
                        RandomStartPhase = input.ReadBool();
                        break;
                    }
                    case 32: {
                        LoopType = (global::OpenTibiaUnity.Protobuf.Shared.AnimationLoopType)input.ReadEnum();
                        break;
                    }
                    case 40: {
                        LoopCount = input.ReadUInt32();
                        break;
                    }
                    case 50: {
                        spritePhases_.AddEntriesFrom(input, _repeated_spritePhases_codec);
                        break;
                    }
                }
            }
        }

    }

    public sealed partial class SpritePhase : pb::IMessage<SpritePhase>
    {
        private static readonly pb::MessageParser<SpritePhase> _parser = new pb::MessageParser<SpritePhase>(() => new SpritePhase());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SpritePhase> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
            get { return global::OpenTibiaUnity.Protobuf.Appearances.AppearancesReflection.Descriptor.MessageTypes[23]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SpritePhase() {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SpritePhase(SpritePhase other) : this() {
            durationMin_ = other.durationMin_;
            durationMax_ = other.durationMax_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SpritePhase Clone() {
            return new SpritePhase(this);
        }

        /// <summary>Field number for the "durationMin" field.</summary>
        public const int DurationMinFieldNumber = 1;
        private uint durationMin_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DurationMin {
            get { return durationMin_; }
            set {
                durationMin_ = value;
            }
        }

        /// <summary>Field number for the "durationMax" field.</summary>
        public const int DurationMaxFieldNumber = 2;
        private uint durationMax_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DurationMax {
            get { return durationMax_; }
            set {
                durationMax_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
            return Equals(other as SpritePhase);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SpritePhase other) {
            if (ReferenceEquals(other, null)) {
                return false;
            }
            if (ReferenceEquals(other, this)) {
                return true;
            }
            if (DurationMin != other.DurationMin) return false;
            if (DurationMax != other.DurationMax) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
            int hash = 1;
            if (DurationMin != 0) hash ^= DurationMin.GetHashCode();
            if (DurationMax != 0) hash ^= DurationMax.GetHashCode();
            if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
            if (DurationMin != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(DurationMin);
            }
            if (DurationMax != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(DurationMax);
            }
            if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
            int size = 0;
            if (DurationMin != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DurationMin);
            }
            if (DurationMax != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DurationMax);
            }
            if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SpritePhase other) {
            if (other == null) {
                return;
            }
            if (other.DurationMin != 0) {
                DurationMin = other.DurationMin;
            }
            if (other.DurationMax != 0) {
                DurationMax = other.DurationMax;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
                switch (tag) {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8: {
                        DurationMin = input.ReadUInt32();
                        break;
                    }
                    case 16: {
                        DurationMax = input.ReadUInt32();
                        break;
                    }
                }
            }
        }

    }

    #endregion

}

#endregion Designer generated code